#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RealEstateDataContext
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="RealEstate")]
	public partial class RealEstateDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertADDRESS(ADDRESS instance);
    partial void UpdateADDRESS(ADDRESS instance);
    partial void DeleteADDRESS(ADDRESS instance);
    partial void InsertWARD(WARD instance);
    partial void UpdateWARD(WARD instance);
    partial void DeleteWARD(WARD instance);
    partial void InsertCITY(CITY instance);
    partial void UpdateCITY(CITY instance);
    partial void DeleteCITY(CITY instance);
    partial void InsertCOMPANY(COMPANY instance);
    partial void UpdateCOMPANY(COMPANY instance);
    partial void DeleteCOMPANY(COMPANY instance);
    partial void InsertCOMPANY_IMAGE(COMPANY_IMAGE instance);
    partial void UpdateCOMPANY_IMAGE(COMPANY_IMAGE instance);
    partial void DeleteCOMPANY_IMAGE(COMPANY_IMAGE instance);
    partial void InsertCONTACT(CONTACT instance);
    partial void UpdateCONTACT(CONTACT instance);
    partial void DeleteCONTACT(CONTACT instance);
    partial void InsertCUSTOMER(CUSTOMER instance);
    partial void UpdateCUSTOMER(CUSTOMER instance);
    partial void DeleteCUSTOMER(CUSTOMER instance);
    partial void InsertDISTRICT(DISTRICT instance);
    partial void UpdateDISTRICT(DISTRICT instance);
    partial void DeleteDISTRICT(DISTRICT instance);
    partial void InsertDISTRICT_DETAIL(DISTRICT_DETAIL instance);
    partial void UpdateDISTRICT_DETAIL(DISTRICT_DETAIL instance);
    partial void DeleteDISTRICT_DETAIL(DISTRICT_DETAIL instance);
    partial void InsertGROUP(GROUP instance);
    partial void UpdateGROUP(GROUP instance);
    partial void DeleteGROUP(GROUP instance);
    partial void InsertGROUP_DETAIL(GROUP_DETAIL instance);
    partial void UpdateGROUP_DETAIL(GROUP_DETAIL instance);
    partial void DeleteGROUP_DETAIL(GROUP_DETAIL instance);
    partial void InsertIMAGE(IMAGE instance);
    partial void UpdateIMAGE(IMAGE instance);
    partial void DeleteIMAGE(IMAGE instance);
    partial void InsertNATION(NATION instance);
    partial void UpdateNATION(NATION instance);
    partial void DeleteNATION(NATION instance);
    partial void InsertNEW(NEW instance);
    partial void UpdateNEW(NEW instance);
    partial void DeleteNEW(NEW instance);
    partial void InsertNEWS_SALE(NEWS_SALE instance);
    partial void UpdateNEWS_SALE(NEWS_SALE instance);
    partial void DeleteNEWS_SALE(NEWS_SALE instance);
    partial void InsertNEWS_SALE_TYPE(NEWS_SALE_TYPE instance);
    partial void UpdateNEWS_SALE_TYPE(NEWS_SALE_TYPE instance);
    partial void DeleteNEWS_SALE_TYPE(NEWS_SALE_TYPE instance);
    partial void InsertNEWS_TYPE(NEWS_TYPE instance);
    partial void UpdateNEWS_TYPE(NEWS_TYPE instance);
    partial void DeleteNEWS_TYPE(NEWS_TYPE instance);
    partial void InsertPROJECT(PROJECT instance);
    partial void UpdatePROJECT(PROJECT instance);
    partial void DeletePROJECT(PROJECT instance);
    partial void InsertPROJECT_TYPE(PROJECT_TYPE instance);
    partial void UpdatePROJECT_TYPE(PROJECT_TYPE instance);
    partial void DeletePROJECT_TYPE(PROJECT_TYPE instance);
    partial void InsertPROPERTY_COMPANY(PROPERTY_COMPANY instance);
    partial void UpdatePROPERTY_COMPANY(PROPERTY_COMPANY instance);
    partial void DeletePROPERTY_COMPANY(PROPERTY_COMPANY instance);
    partial void InsertPROPERTY_CUSTOMER(PROPERTY_CUSTOMER instance);
    partial void UpdatePROPERTY_CUSTOMER(PROPERTY_CUSTOMER instance);
    partial void DeletePROPERTY_CUSTOMER(PROPERTY_CUSTOMER instance);
    partial void InsertREAL_ESTATE(REAL_ESTATE instance);
    partial void UpdateREAL_ESTATE(REAL_ESTATE instance);
    partial void DeleteREAL_ESTATE(REAL_ESTATE instance);
    partial void InsertREAL_ESTATE_IMAGE(REAL_ESTATE_IMAGE instance);
    partial void UpdateREAL_ESTATE_IMAGE(REAL_ESTATE_IMAGE instance);
    partial void DeleteREAL_ESTATE_IMAGE(REAL_ESTATE_IMAGE instance);
    partial void InsertREAL_ESTATE_TYPE(REAL_ESTATE_TYPE instance);
    partial void UpdateREAL_ESTATE_TYPE(REAL_ESTATE_TYPE instance);
    partial void DeleteREAL_ESTATE_TYPE(REAL_ESTATE_TYPE instance);
    partial void InsertRULE(RULE instance);
    partial void UpdateRULE(RULE instance);
    partial void DeleteRULE(RULE instance);
    partial void InsertSTREET(STREET instance);
    partial void UpdateSTREET(STREET instance);
    partial void DeleteSTREET(STREET instance);
    partial void InsertUNIT(UNIT instance);
    partial void UpdateUNIT(UNIT instance);
    partial void DeleteUNIT(UNIT instance);
    partial void InsertUNIT_PRICE(UNIT_PRICE instance);
    partial void UpdateUNIT_PRICE(UNIT_PRICE instance);
    partial void DeleteUNIT_PRICE(UNIT_PRICE instance);
    partial void InsertUSER(USER instance);
    partial void UpdateUSER(USER instance);
    partial void DeleteUSER(USER instance);
    partial void InsertUTILITY(UTILITY instance);
    partial void UpdateUTILITY(UTILITY instance);
    partial void DeleteUTILITY(UTILITY instance);
    partial void InsertUTILITY_DETAIL(UTILITY_DETAIL instance);
    partial void UpdateUTILITY_DETAIL(UTILITY_DETAIL instance);
    partial void DeleteUTILITY_DETAIL(UTILITY_DETAIL instance);
    #endregion
		
		public RealEstateDataClassesDataContext() : 
				base(global::RealEstateDataContext.Properties.Settings.Default.RealEstateConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public RealEstateDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RealEstateDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RealEstateDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RealEstateDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ADDRESS> ADDRESSes
		{
			get
			{
				return this.GetTable<ADDRESS>();
			}
		}
		
		public System.Data.Linq.Table<WARD> WARDs
		{
			get
			{
				return this.GetTable<WARD>();
			}
		}
		
		public System.Data.Linq.Table<CITY> CITies
		{
			get
			{
				return this.GetTable<CITY>();
			}
		}
		
		public System.Data.Linq.Table<COMPANY> COMPANies
		{
			get
			{
				return this.GetTable<COMPANY>();
			}
		}
		
		public System.Data.Linq.Table<COMPANY_IMAGE> COMPANY_IMAGEs
		{
			get
			{
				return this.GetTable<COMPANY_IMAGE>();
			}
		}
		
		public System.Data.Linq.Table<CONTACT> CONTACTs
		{
			get
			{
				return this.GetTable<CONTACT>();
			}
		}
		
		public System.Data.Linq.Table<CUSTOMER> CUSTOMERs
		{
			get
			{
				return this.GetTable<CUSTOMER>();
			}
		}
		
		public System.Data.Linq.Table<DISTRICT> DISTRICTs
		{
			get
			{
				return this.GetTable<DISTRICT>();
			}
		}
		
		public System.Data.Linq.Table<DISTRICT_DETAIL> DISTRICT_DETAILs
		{
			get
			{
				return this.GetTable<DISTRICT_DETAIL>();
			}
		}
		
		public System.Data.Linq.Table<GROUP> GROUPs
		{
			get
			{
				return this.GetTable<GROUP>();
			}
		}
		
		public System.Data.Linq.Table<GROUP_DETAIL> GROUP_DETAILs
		{
			get
			{
				return this.GetTable<GROUP_DETAIL>();
			}
		}
		
		public System.Data.Linq.Table<IMAGE> IMAGEs
		{
			get
			{
				return this.GetTable<IMAGE>();
			}
		}
		
		public System.Data.Linq.Table<NATION> NATIONs
		{
			get
			{
				return this.GetTable<NATION>();
			}
		}
		
		public System.Data.Linq.Table<NEW> NEWs
		{
			get
			{
				return this.GetTable<NEW>();
			}
		}
		
		public System.Data.Linq.Table<NEWS_SALE> NEWS_SALEs
		{
			get
			{
				return this.GetTable<NEWS_SALE>();
			}
		}
		
		public System.Data.Linq.Table<NEWS_SALE_TYPE> NEWS_SALE_TYPEs
		{
			get
			{
				return this.GetTable<NEWS_SALE_TYPE>();
			}
		}
		
		public System.Data.Linq.Table<NEWS_TYPE> NEWS_TYPEs
		{
			get
			{
				return this.GetTable<NEWS_TYPE>();
			}
		}
		
		public System.Data.Linq.Table<PROJECT> PROJECTs
		{
			get
			{
				return this.GetTable<PROJECT>();
			}
		}
		
		public System.Data.Linq.Table<PROJECT_TYPE> PROJECT_TYPEs
		{
			get
			{
				return this.GetTable<PROJECT_TYPE>();
			}
		}
		
		public System.Data.Linq.Table<PROPERTY_COMPANY> PROPERTY_COMPANies
		{
			get
			{
				return this.GetTable<PROPERTY_COMPANY>();
			}
		}
		
		public System.Data.Linq.Table<PROPERTY_CUSTOMER> PROPERTY_CUSTOMERs
		{
			get
			{
				return this.GetTable<PROPERTY_CUSTOMER>();
			}
		}
		
		public System.Data.Linq.Table<REAL_ESTATE> REAL_ESTATEs
		{
			get
			{
				return this.GetTable<REAL_ESTATE>();
			}
		}
		
		public System.Data.Linq.Table<REAL_ESTATE_IMAGE> REAL_ESTATE_IMAGEs
		{
			get
			{
				return this.GetTable<REAL_ESTATE_IMAGE>();
			}
		}
		
		public System.Data.Linq.Table<REAL_ESTATE_TYPE> REAL_ESTATE_TYPEs
		{
			get
			{
				return this.GetTable<REAL_ESTATE_TYPE>();
			}
		}
		
		public System.Data.Linq.Table<RULE> RULEs
		{
			get
			{
				return this.GetTable<RULE>();
			}
		}
		
		public System.Data.Linq.Table<STREET> STREETs
		{
			get
			{
				return this.GetTable<STREET>();
			}
		}
		
		public System.Data.Linq.Table<UNIT> UNITs
		{
			get
			{
				return this.GetTable<UNIT>();
			}
		}
		
		public System.Data.Linq.Table<UNIT_PRICE> UNIT_PRICEs
		{
			get
			{
				return this.GetTable<UNIT_PRICE>();
			}
		}
		
		public System.Data.Linq.Table<USER> USERs
		{
			get
			{
				return this.GetTable<USER>();
			}
		}
		
		public System.Data.Linq.Table<UTILITY> UTILITies
		{
			get
			{
				return this.GetTable<UTILITY>();
			}
		}
		
		public System.Data.Linq.Table<UTILITY_DETAIL> UTILITY_DETAILs
		{
			get
			{
				return this.GetTable<UTILITY_DETAIL>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ADDRESS")]
	public partial class ADDRESS : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _NationID;
		
		private int _CityID;
		
		private System.Nullable<int> _DistrictID;
		
		private System.Nullable<int> _WardID;
		
		private System.Nullable<int> _StreetID;
		
		private string _Detail;
		
		private EntitySet<COMPANY> _COMPANies;
		
		private EntitySet<CONTACT> _CONTACTs;
		
		private EntitySet<CUSTOMER> _CUSTOMERs;
		
		private EntitySet<PROJECT> _PROJECTs;
		
		private EntitySet<REAL_ESTATE> _REAL_ESTATEs;
		
		private EntityRef<WARD> _WARD;
		
		private EntityRef<CITY> _CITY;
		
		private EntityRef<DISTRICT> _DISTRICT;
		
		private EntityRef<NATION> _NATION;
		
		private EntityRef<STREET> _STREET;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNationIDChanging(int value);
    partial void OnNationIDChanged();
    partial void OnCityIDChanging(int value);
    partial void OnCityIDChanged();
    partial void OnDistrictIDChanging(System.Nullable<int> value);
    partial void OnDistrictIDChanged();
    partial void OnWardIDChanging(System.Nullable<int> value);
    partial void OnWardIDChanged();
    partial void OnStreetIDChanging(System.Nullable<int> value);
    partial void OnStreetIDChanged();
    partial void OnDetailChanging(string value);
    partial void OnDetailChanged();
    #endregion
		
		public ADDRESS()
		{
			this._COMPANies = new EntitySet<COMPANY>(new Action<COMPANY>(this.attach_COMPANies), new Action<COMPANY>(this.detach_COMPANies));
			this._CONTACTs = new EntitySet<CONTACT>(new Action<CONTACT>(this.attach_CONTACTs), new Action<CONTACT>(this.detach_CONTACTs));
			this._CUSTOMERs = new EntitySet<CUSTOMER>(new Action<CUSTOMER>(this.attach_CUSTOMERs), new Action<CUSTOMER>(this.detach_CUSTOMERs));
			this._PROJECTs = new EntitySet<PROJECT>(new Action<PROJECT>(this.attach_PROJECTs), new Action<PROJECT>(this.detach_PROJECTs));
			this._REAL_ESTATEs = new EntitySet<REAL_ESTATE>(new Action<REAL_ESTATE>(this.attach_REAL_ESTATEs), new Action<REAL_ESTATE>(this.detach_REAL_ESTATEs));
			this._WARD = default(EntityRef<WARD>);
			this._CITY = default(EntityRef<CITY>);
			this._DISTRICT = default(EntityRef<DISTRICT>);
			this._NATION = default(EntityRef<NATION>);
			this._STREET = default(EntityRef<STREET>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NationID", DbType="Int NOT NULL")]
		public int NationID
		{
			get
			{
				return this._NationID;
			}
			set
			{
				if ((this._NationID != value))
				{
					if (this._NATION.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNationIDChanging(value);
					this.SendPropertyChanging();
					this._NationID = value;
					this.SendPropertyChanged("NationID");
					this.OnNationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", DbType="Int NOT NULL")]
		public int CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					if (this._CITY.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistrictID", DbType="Int")]
		public System.Nullable<int> DistrictID
		{
			get
			{
				return this._DistrictID;
			}
			set
			{
				if ((this._DistrictID != value))
				{
					if (this._DISTRICT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDistrictIDChanging(value);
					this.SendPropertyChanging();
					this._DistrictID = value;
					this.SendPropertyChanged("DistrictID");
					this.OnDistrictIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WardID", DbType="Int")]
		public System.Nullable<int> WardID
		{
			get
			{
				return this._WardID;
			}
			set
			{
				if ((this._WardID != value))
				{
					if (this._WARD.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWardIDChanging(value);
					this.SendPropertyChanging();
					this._WardID = value;
					this.SendPropertyChanged("WardID");
					this.OnWardIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StreetID", DbType="Int")]
		public System.Nullable<int> StreetID
		{
			get
			{
				return this._StreetID;
			}
			set
			{
				if ((this._StreetID != value))
				{
					if (this._STREET.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStreetIDChanging(value);
					this.SendPropertyChanging();
					this._StreetID = value;
					this.SendPropertyChanged("StreetID");
					this.OnStreetIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Detail", DbType="NVarChar(100)")]
		public string Detail
		{
			get
			{
				return this._Detail;
			}
			set
			{
				if ((this._Detail != value))
				{
					this.OnDetailChanging(value);
					this.SendPropertyChanging();
					this._Detail = value;
					this.SendPropertyChanged("Detail");
					this.OnDetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ADDRESS_COMPANY", Storage="_COMPANies", ThisKey="ID", OtherKey="AddressID")]
		public EntitySet<COMPANY> COMPANies
		{
			get
			{
				return this._COMPANies;
			}
			set
			{
				this._COMPANies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ADDRESS_CONTACT", Storage="_CONTACTs", ThisKey="ID", OtherKey="AddressID")]
		public EntitySet<CONTACT> CONTACTs
		{
			get
			{
				return this._CONTACTs;
			}
			set
			{
				this._CONTACTs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ADDRESS_CUSTOMER", Storage="_CUSTOMERs", ThisKey="ID", OtherKey="AddressID")]
		public EntitySet<CUSTOMER> CUSTOMERs
		{
			get
			{
				return this._CUSTOMERs;
			}
			set
			{
				this._CUSTOMERs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ADDRESS_PROJECT", Storage="_PROJECTs", ThisKey="ID", OtherKey="AddressID")]
		public EntitySet<PROJECT> PROJECTs
		{
			get
			{
				return this._PROJECTs;
			}
			set
			{
				this._PROJECTs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ADDRESS_REAL_ESTATE", Storage="_REAL_ESTATEs", ThisKey="ID", OtherKey="AddressID")]
		public EntitySet<REAL_ESTATE> REAL_ESTATEs
		{
			get
			{
				return this._REAL_ESTATEs;
			}
			set
			{
				this._REAL_ESTATEs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WARD_ADDRESS", Storage="_WARD", ThisKey="WardID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public WARD WARD
		{
			get
			{
				return this._WARD.Entity;
			}
			set
			{
				WARD previousValue = this._WARD.Entity;
				if (((previousValue != value) 
							|| (this._WARD.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WARD.Entity = null;
						previousValue.ADDRESSes.Remove(this);
					}
					this._WARD.Entity = value;
					if ((value != null))
					{
						value.ADDRESSes.Add(this);
						this._WardID = value.ID;
					}
					else
					{
						this._WardID = default(Nullable<int>);
					}
					this.SendPropertyChanged("WARD");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CITY_ADDRESS", Storage="_CITY", ThisKey="CityID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CITY CITY
		{
			get
			{
				return this._CITY.Entity;
			}
			set
			{
				CITY previousValue = this._CITY.Entity;
				if (((previousValue != value) 
							|| (this._CITY.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CITY.Entity = null;
						previousValue.ADDRESSes.Remove(this);
					}
					this._CITY.Entity = value;
					if ((value != null))
					{
						value.ADDRESSes.Add(this);
						this._CityID = value.ID;
					}
					else
					{
						this._CityID = default(int);
					}
					this.SendPropertyChanged("CITY");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DISTRICT_ADDRESS", Storage="_DISTRICT", ThisKey="DistrictID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public DISTRICT DISTRICT
		{
			get
			{
				return this._DISTRICT.Entity;
			}
			set
			{
				DISTRICT previousValue = this._DISTRICT.Entity;
				if (((previousValue != value) 
							|| (this._DISTRICT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DISTRICT.Entity = null;
						previousValue.ADDRESSes.Remove(this);
					}
					this._DISTRICT.Entity = value;
					if ((value != null))
					{
						value.ADDRESSes.Add(this);
						this._DistrictID = value.ID;
					}
					else
					{
						this._DistrictID = default(Nullable<int>);
					}
					this.SendPropertyChanged("DISTRICT");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NATION_ADDRESS", Storage="_NATION", ThisKey="NationID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public NATION NATION
		{
			get
			{
				return this._NATION.Entity;
			}
			set
			{
				NATION previousValue = this._NATION.Entity;
				if (((previousValue != value) 
							|| (this._NATION.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NATION.Entity = null;
						previousValue.ADDRESSes.Remove(this);
					}
					this._NATION.Entity = value;
					if ((value != null))
					{
						value.ADDRESSes.Add(this);
						this._NationID = value.ID;
					}
					else
					{
						this._NationID = default(int);
					}
					this.SendPropertyChanged("NATION");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STREET_ADDRESS", Storage="_STREET", ThisKey="StreetID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public STREET STREET
		{
			get
			{
				return this._STREET.Entity;
			}
			set
			{
				STREET previousValue = this._STREET.Entity;
				if (((previousValue != value) 
							|| (this._STREET.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._STREET.Entity = null;
						previousValue.ADDRESSes.Remove(this);
					}
					this._STREET.Entity = value;
					if ((value != null))
					{
						value.ADDRESSes.Add(this);
						this._StreetID = value.ID;
					}
					else
					{
						this._StreetID = default(Nullable<int>);
					}
					this.SendPropertyChanged("STREET");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_COMPANies(COMPANY entity)
		{
			this.SendPropertyChanging();
			entity.ADDRESS = this;
		}
		
		private void detach_COMPANies(COMPANY entity)
		{
			this.SendPropertyChanging();
			entity.ADDRESS = null;
		}
		
		private void attach_CONTACTs(CONTACT entity)
		{
			this.SendPropertyChanging();
			entity.ADDRESS = this;
		}
		
		private void detach_CONTACTs(CONTACT entity)
		{
			this.SendPropertyChanging();
			entity.ADDRESS = null;
		}
		
		private void attach_CUSTOMERs(CUSTOMER entity)
		{
			this.SendPropertyChanging();
			entity.ADDRESS = this;
		}
		
		private void detach_CUSTOMERs(CUSTOMER entity)
		{
			this.SendPropertyChanging();
			entity.ADDRESS = null;
		}
		
		private void attach_PROJECTs(PROJECT entity)
		{
			this.SendPropertyChanging();
			entity.ADDRESS = this;
		}
		
		private void detach_PROJECTs(PROJECT entity)
		{
			this.SendPropertyChanging();
			entity.ADDRESS = null;
		}
		
		private void attach_REAL_ESTATEs(REAL_ESTATE entity)
		{
			this.SendPropertyChanging();
			entity.ADDRESS = this;
		}
		
		private void detach_REAL_ESTATEs(REAL_ESTATE entity)
		{
			this.SendPropertyChanging();
			entity.ADDRESS = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WARD")]
	public partial class WARD : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _DistrictID;
		
		private EntitySet<ADDRESS> _ADDRESSes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDistrictIDChanging(int value);
    partial void OnDistrictIDChanged();
    #endregion
		
		public WARD()
		{
			this._ADDRESSes = new EntitySet<ADDRESS>(new Action<ADDRESS>(this.attach_ADDRESSes), new Action<ADDRESS>(this.detach_ADDRESSes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistrictID", DbType="Int NOT NULL")]
		public int DistrictID
		{
			get
			{
				return this._DistrictID;
			}
			set
			{
				if ((this._DistrictID != value))
				{
					this.OnDistrictIDChanging(value);
					this.SendPropertyChanging();
					this._DistrictID = value;
					this.SendPropertyChanged("DistrictID");
					this.OnDistrictIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WARD_ADDRESS", Storage="_ADDRESSes", ThisKey="ID", OtherKey="WardID")]
		public EntitySet<ADDRESS> ADDRESSes
		{
			get
			{
				return this._ADDRESSes;
			}
			set
			{
				this._ADDRESSes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ADDRESSes(ADDRESS entity)
		{
			this.SendPropertyChanging();
			entity.WARD = this;
		}
		
		private void detach_ADDRESSes(ADDRESS entity)
		{
			this.SendPropertyChanging();
			entity.WARD = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CITY")]
	public partial class CITY : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _NationID;
		
		private EntitySet<ADDRESS> _ADDRESSes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNationIDChanging(int value);
    partial void OnNationIDChanged();
    #endregion
		
		public CITY()
		{
			this._ADDRESSes = new EntitySet<ADDRESS>(new Action<ADDRESS>(this.attach_ADDRESSes), new Action<ADDRESS>(this.detach_ADDRESSes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NationID", DbType="Int NOT NULL")]
		public int NationID
		{
			get
			{
				return this._NationID;
			}
			set
			{
				if ((this._NationID != value))
				{
					this.OnNationIDChanging(value);
					this.SendPropertyChanging();
					this._NationID = value;
					this.SendPropertyChanged("NationID");
					this.OnNationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CITY_ADDRESS", Storage="_ADDRESSes", ThisKey="ID", OtherKey="CityID")]
		public EntitySet<ADDRESS> ADDRESSes
		{
			get
			{
				return this._ADDRESSes;
			}
			set
			{
				this._ADDRESSes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ADDRESSes(ADDRESS entity)
		{
			this.SendPropertyChanging();
			entity.CITY = this;
		}
		
		private void detach_ADDRESSes(ADDRESS entity)
		{
			this.SendPropertyChanging();
			entity.CITY = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.COMPANY")]
	public partial class COMPANY : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _AddressID;
		
		private string _Phone;
		
		private string _HomePhone;
		
		private string _Fax;
		
		private string _Email;
		
		private string _Website;
		
		private System.Nullable<System.DateTime> _EstablishDay;
		
		private System.Nullable<decimal> _ShareCapital;
		
		private string _FieldOfAction;
		
		private bool _BusinessRegistration;
		
		private string _Description;
		
		private EntitySet<COMPANY_IMAGE> _COMPANY_IMAGEs;
		
		private EntitySet<PROPERTY_COMPANY> _PROPERTY_COMPANies;
		
		private EntityRef<ADDRESS> _ADDRESS;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressIDChanging(int value);
    partial void OnAddressIDChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnHomePhoneChanging(string value);
    partial void OnHomePhoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnWebsiteChanging(string value);
    partial void OnWebsiteChanged();
    partial void OnEstablishDayChanging(System.Nullable<System.DateTime> value);
    partial void OnEstablishDayChanged();
    partial void OnShareCapitalChanging(System.Nullable<decimal> value);
    partial void OnShareCapitalChanged();
    partial void OnFieldOfActionChanging(string value);
    partial void OnFieldOfActionChanged();
    partial void OnBusinessRegistrationChanging(bool value);
    partial void OnBusinessRegistrationChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public COMPANY()
		{
			this._COMPANY_IMAGEs = new EntitySet<COMPANY_IMAGE>(new Action<COMPANY_IMAGE>(this.attach_COMPANY_IMAGEs), new Action<COMPANY_IMAGE>(this.detach_COMPANY_IMAGEs));
			this._PROPERTY_COMPANies = new EntitySet<PROPERTY_COMPANY>(new Action<PROPERTY_COMPANY>(this.attach_PROPERTY_COMPANies), new Action<PROPERTY_COMPANY>(this.detach_PROPERTY_COMPANies));
			this._ADDRESS = default(EntityRef<ADDRESS>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressID", DbType="Int NOT NULL")]
		public int AddressID
		{
			get
			{
				return this._AddressID;
			}
			set
			{
				if ((this._AddressID != value))
				{
					if (this._ADDRESS.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressIDChanging(value);
					this.SendPropertyChanging();
					this._AddressID = value;
					this.SendPropertyChanged("AddressID");
					this.OnAddressIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(20)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomePhone", DbType="VarChar(20)")]
		public string HomePhone
		{
			get
			{
				return this._HomePhone;
			}
			set
			{
				if ((this._HomePhone != value))
				{
					this.OnHomePhoneChanging(value);
					this.SendPropertyChanging();
					this._HomePhone = value;
					this.SendPropertyChanged("HomePhone");
					this.OnHomePhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fax", DbType="VarChar(50)")]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Website", DbType="VarChar(50)")]
		public string Website
		{
			get
			{
				return this._Website;
			}
			set
			{
				if ((this._Website != value))
				{
					this.OnWebsiteChanging(value);
					this.SendPropertyChanging();
					this._Website = value;
					this.SendPropertyChanged("Website");
					this.OnWebsiteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EstablishDay", DbType="Date")]
		public System.Nullable<System.DateTime> EstablishDay
		{
			get
			{
				return this._EstablishDay;
			}
			set
			{
				if ((this._EstablishDay != value))
				{
					this.OnEstablishDayChanging(value);
					this.SendPropertyChanging();
					this._EstablishDay = value;
					this.SendPropertyChanged("EstablishDay");
					this.OnEstablishDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShareCapital", DbType="Money")]
		public System.Nullable<decimal> ShareCapital
		{
			get
			{
				return this._ShareCapital;
			}
			set
			{
				if ((this._ShareCapital != value))
				{
					this.OnShareCapitalChanging(value);
					this.SendPropertyChanging();
					this._ShareCapital = value;
					this.SendPropertyChanged("ShareCapital");
					this.OnShareCapitalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldOfAction", DbType="NVarChar(100)")]
		public string FieldOfAction
		{
			get
			{
				return this._FieldOfAction;
			}
			set
			{
				if ((this._FieldOfAction != value))
				{
					this.OnFieldOfActionChanging(value);
					this.SendPropertyChanging();
					this._FieldOfAction = value;
					this.SendPropertyChanged("FieldOfAction");
					this.OnFieldOfActionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusinessRegistration", DbType="Bit NOT NULL")]
		public bool BusinessRegistration
		{
			get
			{
				return this._BusinessRegistration;
			}
			set
			{
				if ((this._BusinessRegistration != value))
				{
					this.OnBusinessRegistrationChanging(value);
					this.SendPropertyChanging();
					this._BusinessRegistration = value;
					this.SendPropertyChanged("BusinessRegistration");
					this.OnBusinessRegistrationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(500)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="COMPANY_COMPANY_IMAGE", Storage="_COMPANY_IMAGEs", ThisKey="ID", OtherKey="CompanyID")]
		public EntitySet<COMPANY_IMAGE> COMPANY_IMAGEs
		{
			get
			{
				return this._COMPANY_IMAGEs;
			}
			set
			{
				this._COMPANY_IMAGEs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="COMPANY_PROPERTY_COMPANY", Storage="_PROPERTY_COMPANies", ThisKey="ID", OtherKey="CompanyID")]
		public EntitySet<PROPERTY_COMPANY> PROPERTY_COMPANies
		{
			get
			{
				return this._PROPERTY_COMPANies;
			}
			set
			{
				this._PROPERTY_COMPANies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ADDRESS_COMPANY", Storage="_ADDRESS", ThisKey="AddressID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ADDRESS ADDRESS
		{
			get
			{
				return this._ADDRESS.Entity;
			}
			set
			{
				ADDRESS previousValue = this._ADDRESS.Entity;
				if (((previousValue != value) 
							|| (this._ADDRESS.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ADDRESS.Entity = null;
						previousValue.COMPANies.Remove(this);
					}
					this._ADDRESS.Entity = value;
					if ((value != null))
					{
						value.COMPANies.Add(this);
						this._AddressID = value.ID;
					}
					else
					{
						this._AddressID = default(int);
					}
					this.SendPropertyChanged("ADDRESS");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_COMPANY_IMAGEs(COMPANY_IMAGE entity)
		{
			this.SendPropertyChanging();
			entity.COMPANY = this;
		}
		
		private void detach_COMPANY_IMAGEs(COMPANY_IMAGE entity)
		{
			this.SendPropertyChanging();
			entity.COMPANY = null;
		}
		
		private void attach_PROPERTY_COMPANies(PROPERTY_COMPANY entity)
		{
			this.SendPropertyChanging();
			entity.COMPANY = this;
		}
		
		private void detach_PROPERTY_COMPANies(PROPERTY_COMPANY entity)
		{
			this.SendPropertyChanging();
			entity.COMPANY = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.COMPANY_IMAGE")]
	public partial class COMPANY_IMAGE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CompanyID;
		
		private int _ImageID;
		
		private EntityRef<COMPANY> _COMPANY;
		
		private EntityRef<IMAGE> _IMAGE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnImageIDChanging(int value);
    partial void OnImageIDChanged();
    #endregion
		
		public COMPANY_IMAGE()
		{
			this._COMPANY = default(EntityRef<COMPANY>);
			this._IMAGE = default(EntityRef<IMAGE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL")]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._COMPANY.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageID", DbType="Int NOT NULL")]
		public int ImageID
		{
			get
			{
				return this._ImageID;
			}
			set
			{
				if ((this._ImageID != value))
				{
					if (this._IMAGE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnImageIDChanging(value);
					this.SendPropertyChanging();
					this._ImageID = value;
					this.SendPropertyChanged("ImageID");
					this.OnImageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="COMPANY_COMPANY_IMAGE", Storage="_COMPANY", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public COMPANY COMPANY
		{
			get
			{
				return this._COMPANY.Entity;
			}
			set
			{
				COMPANY previousValue = this._COMPANY.Entity;
				if (((previousValue != value) 
							|| (this._COMPANY.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._COMPANY.Entity = null;
						previousValue.COMPANY_IMAGEs.Remove(this);
					}
					this._COMPANY.Entity = value;
					if ((value != null))
					{
						value.COMPANY_IMAGEs.Add(this);
						this._CompanyID = value.ID;
					}
					else
					{
						this._CompanyID = default(int);
					}
					this.SendPropertyChanged("COMPANY");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IMAGE_COMPANY_IMAGE", Storage="_IMAGE", ThisKey="ImageID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public IMAGE IMAGE
		{
			get
			{
				return this._IMAGE.Entity;
			}
			set
			{
				IMAGE previousValue = this._IMAGE.Entity;
				if (((previousValue != value) 
							|| (this._IMAGE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IMAGE.Entity = null;
						previousValue.COMPANY_IMAGEs.Remove(this);
					}
					this._IMAGE.Entity = value;
					if ((value != null))
					{
						value.COMPANY_IMAGEs.Add(this);
						this._ImageID = value.ID;
					}
					else
					{
						this._ImageID = default(int);
					}
					this.SendPropertyChanged("IMAGE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CONTACT")]
	public partial class CONTACT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private System.Nullable<int> _AddressID;
		
		private string _Phone;
		
		private string _HomePhone;
		
		private string _Note;
		
		private EntitySet<REAL_ESTATE> _REAL_ESTATEs;
		
		private EntityRef<ADDRESS> _ADDRESS;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressIDChanging(System.Nullable<int> value);
    partial void OnAddressIDChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnHomePhoneChanging(string value);
    partial void OnHomePhoneChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public CONTACT()
		{
			this._REAL_ESTATEs = new EntitySet<REAL_ESTATE>(new Action<REAL_ESTATE>(this.attach_REAL_ESTATEs), new Action<REAL_ESTATE>(this.detach_REAL_ESTATEs));
			this._ADDRESS = default(EntityRef<ADDRESS>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressID", DbType="Int")]
		public System.Nullable<int> AddressID
		{
			get
			{
				return this._AddressID;
			}
			set
			{
				if ((this._AddressID != value))
				{
					if (this._ADDRESS.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressIDChanging(value);
					this.SendPropertyChanging();
					this._AddressID = value;
					this.SendPropertyChanged("AddressID");
					this.OnAddressIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(20)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomePhone", DbType="VarChar(20)")]
		public string HomePhone
		{
			get
			{
				return this._HomePhone;
			}
			set
			{
				if ((this._HomePhone != value))
				{
					this.OnHomePhoneChanging(value);
					this.SendPropertyChanging();
					this._HomePhone = value;
					this.SendPropertyChanged("HomePhone");
					this.OnHomePhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CONTACT_REAL_ESTATE", Storage="_REAL_ESTATEs", ThisKey="ID", OtherKey="ContactID")]
		public EntitySet<REAL_ESTATE> REAL_ESTATEs
		{
			get
			{
				return this._REAL_ESTATEs;
			}
			set
			{
				this._REAL_ESTATEs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ADDRESS_CONTACT", Storage="_ADDRESS", ThisKey="AddressID", OtherKey="ID", IsForeignKey=true)]
		public ADDRESS ADDRESS
		{
			get
			{
				return this._ADDRESS.Entity;
			}
			set
			{
				ADDRESS previousValue = this._ADDRESS.Entity;
				if (((previousValue != value) 
							|| (this._ADDRESS.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ADDRESS.Entity = null;
						previousValue.CONTACTs.Remove(this);
					}
					this._ADDRESS.Entity = value;
					if ((value != null))
					{
						value.CONTACTs.Add(this);
						this._AddressID = value.ID;
					}
					else
					{
						this._AddressID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ADDRESS");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_REAL_ESTATEs(REAL_ESTATE entity)
		{
			this.SendPropertyChanging();
			entity.CONTACT = this;
		}
		
		private void detach_REAL_ESTATEs(REAL_ESTATE entity)
		{
			this.SendPropertyChanging();
			entity.CONTACT = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CUSTOMER")]
	public partial class CUSTOMER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _AddressID;
		
		private string _IdentityCard;
		
		private string _Phone;
		
		private string _HomePhone;
		
		private string _Email;
		
		private System.Nullable<int> _UserID;
		
		private EntitySet<PROPERTY_CUSTOMER> _PROPERTY_CUSTOMERs;
		
		private EntityRef<ADDRESS> _ADDRESS;
		
		private EntityRef<USER> _USER;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressIDChanging(int value);
    partial void OnAddressIDChanged();
    partial void OnIdentityCardChanging(string value);
    partial void OnIdentityCardChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnHomePhoneChanging(string value);
    partial void OnHomePhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    #endregion
		
		public CUSTOMER()
		{
			this._PROPERTY_CUSTOMERs = new EntitySet<PROPERTY_CUSTOMER>(new Action<PROPERTY_CUSTOMER>(this.attach_PROPERTY_CUSTOMERs), new Action<PROPERTY_CUSTOMER>(this.detach_PROPERTY_CUSTOMERs));
			this._ADDRESS = default(EntityRef<ADDRESS>);
			this._USER = default(EntityRef<USER>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressID", DbType="Int NOT NULL")]
		public int AddressID
		{
			get
			{
				return this._AddressID;
			}
			set
			{
				if ((this._AddressID != value))
				{
					if (this._ADDRESS.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressIDChanging(value);
					this.SendPropertyChanging();
					this._AddressID = value;
					this.SendPropertyChanged("AddressID");
					this.OnAddressIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdentityCard", DbType="VarChar(20)")]
		public string IdentityCard
		{
			get
			{
				return this._IdentityCard;
			}
			set
			{
				if ((this._IdentityCard != value))
				{
					this.OnIdentityCardChanging(value);
					this.SendPropertyChanging();
					this._IdentityCard = value;
					this.SendPropertyChanged("IdentityCard");
					this.OnIdentityCardChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(20)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomePhone", DbType="VarChar(20)")]
		public string HomePhone
		{
			get
			{
				return this._HomePhone;
			}
			set
			{
				if ((this._HomePhone != value))
				{
					this.OnHomePhoneChanging(value);
					this.SendPropertyChanging();
					this._HomePhone = value;
					this.SendPropertyChanged("HomePhone");
					this.OnHomePhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int")]
		public System.Nullable<int> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._USER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CUSTOMER_PROPERTY_CUSTOMER", Storage="_PROPERTY_CUSTOMERs", ThisKey="ID", OtherKey="CustomerID")]
		public EntitySet<PROPERTY_CUSTOMER> PROPERTY_CUSTOMERs
		{
			get
			{
				return this._PROPERTY_CUSTOMERs;
			}
			set
			{
				this._PROPERTY_CUSTOMERs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ADDRESS_CUSTOMER", Storage="_ADDRESS", ThisKey="AddressID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ADDRESS ADDRESS
		{
			get
			{
				return this._ADDRESS.Entity;
			}
			set
			{
				ADDRESS previousValue = this._ADDRESS.Entity;
				if (((previousValue != value) 
							|| (this._ADDRESS.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ADDRESS.Entity = null;
						previousValue.CUSTOMERs.Remove(this);
					}
					this._ADDRESS.Entity = value;
					if ((value != null))
					{
						value.CUSTOMERs.Add(this);
						this._AddressID = value.ID;
					}
					else
					{
						this._AddressID = default(int);
					}
					this.SendPropertyChanged("ADDRESS");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USER_CUSTOMER", Storage="_USER", ThisKey="UserID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public USER USER
		{
			get
			{
				return this._USER.Entity;
			}
			set
			{
				USER previousValue = this._USER.Entity;
				if (((previousValue != value) 
							|| (this._USER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._USER.Entity = null;
						previousValue.CUSTOMERs.Remove(this);
					}
					this._USER.Entity = value;
					if ((value != null))
					{
						value.CUSTOMERs.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("USER");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PROPERTY_CUSTOMERs(PROPERTY_CUSTOMER entity)
		{
			this.SendPropertyChanging();
			entity.CUSTOMER = this;
		}
		
		private void detach_PROPERTY_CUSTOMERs(PROPERTY_CUSTOMER entity)
		{
			this.SendPropertyChanging();
			entity.CUSTOMER = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DISTRICT")]
	public partial class DISTRICT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _CityID;
		
		private EntitySet<ADDRESS> _ADDRESSes;
		
		private EntitySet<DISTRICT_DETAIL> _DISTRICT_DETAILs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCityIDChanging(int value);
    partial void OnCityIDChanged();
    #endregion
		
		public DISTRICT()
		{
			this._ADDRESSes = new EntitySet<ADDRESS>(new Action<ADDRESS>(this.attach_ADDRESSes), new Action<ADDRESS>(this.detach_ADDRESSes));
			this._DISTRICT_DETAILs = new EntitySet<DISTRICT_DETAIL>(new Action<DISTRICT_DETAIL>(this.attach_DISTRICT_DETAILs), new Action<DISTRICT_DETAIL>(this.detach_DISTRICT_DETAILs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", DbType="Int NOT NULL")]
		public int CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DISTRICT_ADDRESS", Storage="_ADDRESSes", ThisKey="ID", OtherKey="DistrictID")]
		public EntitySet<ADDRESS> ADDRESSes
		{
			get
			{
				return this._ADDRESSes;
			}
			set
			{
				this._ADDRESSes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DISTRICT_DISTRICT_DETAIL", Storage="_DISTRICT_DETAILs", ThisKey="ID", OtherKey="DistrictID")]
		public EntitySet<DISTRICT_DETAIL> DISTRICT_DETAILs
		{
			get
			{
				return this._DISTRICT_DETAILs;
			}
			set
			{
				this._DISTRICT_DETAILs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ADDRESSes(ADDRESS entity)
		{
			this.SendPropertyChanging();
			entity.DISTRICT = this;
		}
		
		private void detach_ADDRESSes(ADDRESS entity)
		{
			this.SendPropertyChanging();
			entity.DISTRICT = null;
		}
		
		private void attach_DISTRICT_DETAILs(DISTRICT_DETAIL entity)
		{
			this.SendPropertyChanging();
			entity.DISTRICT = this;
		}
		
		private void detach_DISTRICT_DETAILs(DISTRICT_DETAIL entity)
		{
			this.SendPropertyChanging();
			entity.DISTRICT = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DISTRICT_DETAIL")]
	public partial class DISTRICT_DETAIL : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _DistrictID;
		
		private int _StreetID;
		
		private EntityRef<DISTRICT> _DISTRICT;
		
		private EntityRef<STREET> _STREET;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDistrictIDChanging(int value);
    partial void OnDistrictIDChanged();
    partial void OnStreetIDChanging(int value);
    partial void OnStreetIDChanged();
    #endregion
		
		public DISTRICT_DETAIL()
		{
			this._DISTRICT = default(EntityRef<DISTRICT>);
			this._STREET = default(EntityRef<STREET>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistrictID", DbType="Int NOT NULL")]
		public int DistrictID
		{
			get
			{
				return this._DistrictID;
			}
			set
			{
				if ((this._DistrictID != value))
				{
					if (this._DISTRICT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDistrictIDChanging(value);
					this.SendPropertyChanging();
					this._DistrictID = value;
					this.SendPropertyChanged("DistrictID");
					this.OnDistrictIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StreetID", DbType="Int NOT NULL")]
		public int StreetID
		{
			get
			{
				return this._StreetID;
			}
			set
			{
				if ((this._StreetID != value))
				{
					if (this._STREET.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStreetIDChanging(value);
					this.SendPropertyChanging();
					this._StreetID = value;
					this.SendPropertyChanged("StreetID");
					this.OnStreetIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DISTRICT_DISTRICT_DETAIL", Storage="_DISTRICT", ThisKey="DistrictID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public DISTRICT DISTRICT
		{
			get
			{
				return this._DISTRICT.Entity;
			}
			set
			{
				DISTRICT previousValue = this._DISTRICT.Entity;
				if (((previousValue != value) 
							|| (this._DISTRICT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DISTRICT.Entity = null;
						previousValue.DISTRICT_DETAILs.Remove(this);
					}
					this._DISTRICT.Entity = value;
					if ((value != null))
					{
						value.DISTRICT_DETAILs.Add(this);
						this._DistrictID = value.ID;
					}
					else
					{
						this._DistrictID = default(int);
					}
					this.SendPropertyChanged("DISTRICT");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STREET_DISTRICT_DETAIL", Storage="_STREET", ThisKey="StreetID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public STREET STREET
		{
			get
			{
				return this._STREET.Entity;
			}
			set
			{
				STREET previousValue = this._STREET.Entity;
				if (((previousValue != value) 
							|| (this._STREET.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._STREET.Entity = null;
						previousValue.DISTRICT_DETAILs.Remove(this);
					}
					this._STREET.Entity = value;
					if ((value != null))
					{
						value.DISTRICT_DETAILs.Add(this);
						this._StreetID = value.ID;
					}
					else
					{
						this._StreetID = default(int);
					}
					this.SendPropertyChanged("STREET");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[GROUP]")]
	public partial class GROUP : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<GROUP_DETAIL> _GROUP_DETAILs;
		
		private EntitySet<USER> _USERs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public GROUP()
		{
			this._GROUP_DETAILs = new EntitySet<GROUP_DETAIL>(new Action<GROUP_DETAIL>(this.attach_GROUP_DETAILs), new Action<GROUP_DETAIL>(this.detach_GROUP_DETAILs));
			this._USERs = new EntitySet<USER>(new Action<USER>(this.attach_USERs), new Action<USER>(this.detach_USERs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(500)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GROUP_GROUP_DETAIL", Storage="_GROUP_DETAILs", ThisKey="ID", OtherKey="GroupID")]
		public EntitySet<GROUP_DETAIL> GROUP_DETAILs
		{
			get
			{
				return this._GROUP_DETAILs;
			}
			set
			{
				this._GROUP_DETAILs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GROUP_USER", Storage="_USERs", ThisKey="ID", OtherKey="GroupID")]
		public EntitySet<USER> USERs
		{
			get
			{
				return this._USERs;
			}
			set
			{
				this._USERs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GROUP_DETAILs(GROUP_DETAIL entity)
		{
			this.SendPropertyChanging();
			entity.GROUP = this;
		}
		
		private void detach_GROUP_DETAILs(GROUP_DETAIL entity)
		{
			this.SendPropertyChanging();
			entity.GROUP = null;
		}
		
		private void attach_USERs(USER entity)
		{
			this.SendPropertyChanging();
			entity.GROUP = this;
		}
		
		private void detach_USERs(USER entity)
		{
			this.SendPropertyChanging();
			entity.GROUP = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GROUP_DETAIL")]
	public partial class GROUP_DETAIL : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _GroupID;
		
		private int _RuleID;
		
		private EntityRef<GROUP> _GROUP;
		
		private EntityRef<RULE> _RULE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnGroupIDChanging(int value);
    partial void OnGroupIDChanged();
    partial void OnRuleIDChanging(int value);
    partial void OnRuleIDChanged();
    #endregion
		
		public GROUP_DETAIL()
		{
			this._GROUP = default(EntityRef<GROUP>);
			this._RULE = default(EntityRef<RULE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="Int NOT NULL")]
		public int GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._GROUP.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RuleID", DbType="Int NOT NULL")]
		public int RuleID
		{
			get
			{
				return this._RuleID;
			}
			set
			{
				if ((this._RuleID != value))
				{
					if (this._RULE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRuleIDChanging(value);
					this.SendPropertyChanging();
					this._RuleID = value;
					this.SendPropertyChanged("RuleID");
					this.OnRuleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GROUP_GROUP_DETAIL", Storage="_GROUP", ThisKey="GroupID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public GROUP GROUP
		{
			get
			{
				return this._GROUP.Entity;
			}
			set
			{
				GROUP previousValue = this._GROUP.Entity;
				if (((previousValue != value) 
							|| (this._GROUP.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GROUP.Entity = null;
						previousValue.GROUP_DETAILs.Remove(this);
					}
					this._GROUP.Entity = value;
					if ((value != null))
					{
						value.GROUP_DETAILs.Add(this);
						this._GroupID = value.ID;
					}
					else
					{
						this._GroupID = default(int);
					}
					this.SendPropertyChanged("GROUP");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RULE_GROUP_DETAIL", Storage="_RULE", ThisKey="RuleID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public RULE RULE
		{
			get
			{
				return this._RULE.Entity;
			}
			set
			{
				RULE previousValue = this._RULE.Entity;
				if (((previousValue != value) 
							|| (this._RULE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RULE.Entity = null;
						previousValue.GROUP_DETAILs.Remove(this);
					}
					this._RULE.Entity = value;
					if ((value != null))
					{
						value.GROUP_DETAILs.Add(this);
						this._RuleID = value.ID;
					}
					else
					{
						this._RuleID = default(int);
					}
					this.SendPropertyChanged("RULE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IMAGE")]
	public partial class IMAGE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Path;
		
		private string _Description;
		
		private EntitySet<COMPANY_IMAGE> _COMPANY_IMAGEs;
		
		private EntitySet<NEW> _NEWs;
		
		private EntitySet<REAL_ESTATE_IMAGE> _REAL_ESTATE_IMAGEs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPathChanging(string value);
    partial void OnPathChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public IMAGE()
		{
			this._COMPANY_IMAGEs = new EntitySet<COMPANY_IMAGE>(new Action<COMPANY_IMAGE>(this.attach_COMPANY_IMAGEs), new Action<COMPANY_IMAGE>(this.detach_COMPANY_IMAGEs));
			this._NEWs = new EntitySet<NEW>(new Action<NEW>(this.attach_NEWs), new Action<NEW>(this.detach_NEWs));
			this._REAL_ESTATE_IMAGEs = new EntitySet<REAL_ESTATE_IMAGE>(new Action<REAL_ESTATE_IMAGE>(this.attach_REAL_ESTATE_IMAGEs), new Action<REAL_ESTATE_IMAGE>(this.detach_REAL_ESTATE_IMAGEs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(20)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Path", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Path
		{
			get
			{
				return this._Path;
			}
			set
			{
				if ((this._Path != value))
				{
					this.OnPathChanging(value);
					this.SendPropertyChanging();
					this._Path = value;
					this.SendPropertyChanged("Path");
					this.OnPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(500)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IMAGE_COMPANY_IMAGE", Storage="_COMPANY_IMAGEs", ThisKey="ID", OtherKey="ImageID")]
		public EntitySet<COMPANY_IMAGE> COMPANY_IMAGEs
		{
			get
			{
				return this._COMPANY_IMAGEs;
			}
			set
			{
				this._COMPANY_IMAGEs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IMAGE_NEW", Storage="_NEWs", ThisKey="ID", OtherKey="ImageID")]
		public EntitySet<NEW> NEWs
		{
			get
			{
				return this._NEWs;
			}
			set
			{
				this._NEWs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IMAGE_REAL_ESTATE_IMAGE", Storage="_REAL_ESTATE_IMAGEs", ThisKey="ID", OtherKey="ImageID")]
		public EntitySet<REAL_ESTATE_IMAGE> REAL_ESTATE_IMAGEs
		{
			get
			{
				return this._REAL_ESTATE_IMAGEs;
			}
			set
			{
				this._REAL_ESTATE_IMAGEs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_COMPANY_IMAGEs(COMPANY_IMAGE entity)
		{
			this.SendPropertyChanging();
			entity.IMAGE = this;
		}
		
		private void detach_COMPANY_IMAGEs(COMPANY_IMAGE entity)
		{
			this.SendPropertyChanging();
			entity.IMAGE = null;
		}
		
		private void attach_NEWs(NEW entity)
		{
			this.SendPropertyChanging();
			entity.IMAGE = this;
		}
		
		private void detach_NEWs(NEW entity)
		{
			this.SendPropertyChanging();
			entity.IMAGE = null;
		}
		
		private void attach_REAL_ESTATE_IMAGEs(REAL_ESTATE_IMAGE entity)
		{
			this.SendPropertyChanging();
			entity.IMAGE = this;
		}
		
		private void detach_REAL_ESTATE_IMAGEs(REAL_ESTATE_IMAGE entity)
		{
			this.SendPropertyChanging();
			entity.IMAGE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NATION")]
	public partial class NATION : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _NationCode;
		
		private EntitySet<ADDRESS> _ADDRESSes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNationCodeChanging(string value);
    partial void OnNationCodeChanged();
    #endregion
		
		public NATION()
		{
			this._ADDRESSes = new EntitySet<ADDRESS>(new Action<ADDRESS>(this.attach_ADDRESSes), new Action<ADDRESS>(this.detach_ADDRESSes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NationCode", DbType="NVarChar(10)")]
		public string NationCode
		{
			get
			{
				return this._NationCode;
			}
			set
			{
				if ((this._NationCode != value))
				{
					this.OnNationCodeChanging(value);
					this.SendPropertyChanging();
					this._NationCode = value;
					this.SendPropertyChanged("NationCode");
					this.OnNationCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NATION_ADDRESS", Storage="_ADDRESSes", ThisKey="ID", OtherKey="NationID")]
		public EntitySet<ADDRESS> ADDRESSes
		{
			get
			{
				return this._ADDRESSes;
			}
			set
			{
				this._ADDRESSes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ADDRESSes(ADDRESS entity)
		{
			this.SendPropertyChanging();
			entity.NATION = this;
		}
		
		private void detach_ADDRESSes(ADDRESS entity)
		{
			this.SendPropertyChanging();
			entity.NATION = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NEWS")]
	public partial class NEW : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _TypeID;
		
		private string _Title;
		
		private string _Content;
		
		private string _Author;
		
		private System.Nullable<int> _Rate;
		
		private System.DateTime _PublishTime;
		
		private int _ImageID;
		
		private EntityRef<IMAGE> _IMAGE;
		
		private EntityRef<NEWS_TYPE> _NEWS_TYPE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTypeIDChanging(int value);
    partial void OnTypeIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnRateChanging(System.Nullable<int> value);
    partial void OnRateChanged();
    partial void OnPublishTimeChanging(System.DateTime value);
    partial void OnPublishTimeChanged();
    partial void OnImageIDChanging(int value);
    partial void OnImageIDChanged();
    #endregion
		
		public NEW()
		{
			this._IMAGE = default(EntityRef<IMAGE>);
			this._NEWS_TYPE = default(EntityRef<NEWS_TYPE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="Int NOT NULL")]
		public int TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					if (this._NEWS_TYPE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Author", DbType="NVarChar(100)")]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rate", DbType="Int")]
		public System.Nullable<int> Rate
		{
			get
			{
				return this._Rate;
			}
			set
			{
				if ((this._Rate != value))
				{
					this.OnRateChanging(value);
					this.SendPropertyChanging();
					this._Rate = value;
					this.SendPropertyChanged("Rate");
					this.OnRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublishTime", DbType="Date NOT NULL")]
		public System.DateTime PublishTime
		{
			get
			{
				return this._PublishTime;
			}
			set
			{
				if ((this._PublishTime != value))
				{
					this.OnPublishTimeChanging(value);
					this.SendPropertyChanging();
					this._PublishTime = value;
					this.SendPropertyChanged("PublishTime");
					this.OnPublishTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageID", DbType="Int NOT NULL")]
		public int ImageID
		{
			get
			{
				return this._ImageID;
			}
			set
			{
				if ((this._ImageID != value))
				{
					if (this._IMAGE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnImageIDChanging(value);
					this.SendPropertyChanging();
					this._ImageID = value;
					this.SendPropertyChanged("ImageID");
					this.OnImageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IMAGE_NEW", Storage="_IMAGE", ThisKey="ImageID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public IMAGE IMAGE
		{
			get
			{
				return this._IMAGE.Entity;
			}
			set
			{
				IMAGE previousValue = this._IMAGE.Entity;
				if (((previousValue != value) 
							|| (this._IMAGE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IMAGE.Entity = null;
						previousValue.NEWs.Remove(this);
					}
					this._IMAGE.Entity = value;
					if ((value != null))
					{
						value.NEWs.Add(this);
						this._ImageID = value.ID;
					}
					else
					{
						this._ImageID = default(int);
					}
					this.SendPropertyChanged("IMAGE");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NEWS_TYPE_NEW", Storage="_NEWS_TYPE", ThisKey="TypeID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public NEWS_TYPE NEWS_TYPE
		{
			get
			{
				return this._NEWS_TYPE.Entity;
			}
			set
			{
				NEWS_TYPE previousValue = this._NEWS_TYPE.Entity;
				if (((previousValue != value) 
							|| (this._NEWS_TYPE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NEWS_TYPE.Entity = null;
						previousValue.NEWs.Remove(this);
					}
					this._NEWS_TYPE.Entity = value;
					if ((value != null))
					{
						value.NEWs.Add(this);
						this._TypeID = value.ID;
					}
					else
					{
						this._TypeID = default(int);
					}
					this.SendPropertyChanged("NEWS_TYPE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NEWS_SALE")]
	public partial class NEWS_SALE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _TypeID;
		
		private string _Title;
		
		private string _Content;
		
		private int _RealEstateID;
		
		private System.Nullable<int> _Rate;
		
		private System.DateTime _UpdateTime;
		
		private EntityRef<NEWS_SALE_TYPE> _NEWS_SALE_TYPE;
		
		private EntityRef<REAL_ESTATE> _REAL_ESTATE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTypeIDChanging(int value);
    partial void OnTypeIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnRealEstateIDChanging(int value);
    partial void OnRealEstateIDChanged();
    partial void OnRateChanging(System.Nullable<int> value);
    partial void OnRateChanged();
    partial void OnUpdateTimeChanging(System.DateTime value);
    partial void OnUpdateTimeChanged();
    #endregion
		
		public NEWS_SALE()
		{
			this._NEWS_SALE_TYPE = default(EntityRef<NEWS_SALE_TYPE>);
			this._REAL_ESTATE = default(EntityRef<REAL_ESTATE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="Int NOT NULL")]
		public int TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					if (this._NEWS_SALE_TYPE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RealEstateID", DbType="Int NOT NULL")]
		public int RealEstateID
		{
			get
			{
				return this._RealEstateID;
			}
			set
			{
				if ((this._RealEstateID != value))
				{
					if (this._REAL_ESTATE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRealEstateIDChanging(value);
					this.SendPropertyChanging();
					this._RealEstateID = value;
					this.SendPropertyChanged("RealEstateID");
					this.OnRealEstateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rate", DbType="Int")]
		public System.Nullable<int> Rate
		{
			get
			{
				return this._Rate;
			}
			set
			{
				if ((this._Rate != value))
				{
					this.OnRateChanging(value);
					this.SendPropertyChanging();
					this._Rate = value;
					this.SendPropertyChanged("Rate");
					this.OnRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateTime", DbType="Date NOT NULL")]
		public System.DateTime UpdateTime
		{
			get
			{
				return this._UpdateTime;
			}
			set
			{
				if ((this._UpdateTime != value))
				{
					this.OnUpdateTimeChanging(value);
					this.SendPropertyChanging();
					this._UpdateTime = value;
					this.SendPropertyChanged("UpdateTime");
					this.OnUpdateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NEWS_SALE_TYPE_NEWS_SALE", Storage="_NEWS_SALE_TYPE", ThisKey="TypeID", OtherKey="ID", IsForeignKey=true)]
		public NEWS_SALE_TYPE NEWS_SALE_TYPE
		{
			get
			{
				return this._NEWS_SALE_TYPE.Entity;
			}
			set
			{
				NEWS_SALE_TYPE previousValue = this._NEWS_SALE_TYPE.Entity;
				if (((previousValue != value) 
							|| (this._NEWS_SALE_TYPE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NEWS_SALE_TYPE.Entity = null;
						previousValue.NEWS_SALEs.Remove(this);
					}
					this._NEWS_SALE_TYPE.Entity = value;
					if ((value != null))
					{
						value.NEWS_SALEs.Add(this);
						this._TypeID = value.ID;
					}
					else
					{
						this._TypeID = default(int);
					}
					this.SendPropertyChanged("NEWS_SALE_TYPE");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="REAL_ESTATE_NEWS_SALE", Storage="_REAL_ESTATE", ThisKey="RealEstateID", OtherKey="ID", IsForeignKey=true)]
		public REAL_ESTATE REAL_ESTATE
		{
			get
			{
				return this._REAL_ESTATE.Entity;
			}
			set
			{
				REAL_ESTATE previousValue = this._REAL_ESTATE.Entity;
				if (((previousValue != value) 
							|| (this._REAL_ESTATE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._REAL_ESTATE.Entity = null;
						previousValue.NEWS_SALEs.Remove(this);
					}
					this._REAL_ESTATE.Entity = value;
					if ((value != null))
					{
						value.NEWS_SALEs.Add(this);
						this._RealEstateID = value.ID;
					}
					else
					{
						this._RealEstateID = default(int);
					}
					this.SendPropertyChanged("REAL_ESTATE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NEWS_SALE_TYPE")]
	public partial class NEWS_SALE_TYPE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<NEWS_SALE> _NEWS_SALEs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public NEWS_SALE_TYPE()
		{
			this._NEWS_SALEs = new EntitySet<NEWS_SALE>(new Action<NEWS_SALE>(this.attach_NEWS_SALEs), new Action<NEWS_SALE>(this.detach_NEWS_SALEs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(500)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NEWS_SALE_TYPE_NEWS_SALE", Storage="_NEWS_SALEs", ThisKey="ID", OtherKey="TypeID")]
		public EntitySet<NEWS_SALE> NEWS_SALEs
		{
			get
			{
				return this._NEWS_SALEs;
			}
			set
			{
				this._NEWS_SALEs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_NEWS_SALEs(NEWS_SALE entity)
		{
			this.SendPropertyChanging();
			entity.NEWS_SALE_TYPE = this;
		}
		
		private void detach_NEWS_SALEs(NEWS_SALE entity)
		{
			this.SendPropertyChanging();
			entity.NEWS_SALE_TYPE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NEWS_TYPE")]
	public partial class NEWS_TYPE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<NEW> _NEWs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public NEWS_TYPE()
		{
			this._NEWs = new EntitySet<NEW>(new Action<NEW>(this.attach_NEWs), new Action<NEW>(this.detach_NEWs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(500)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NEWS_TYPE_NEW", Storage="_NEWs", ThisKey="ID", OtherKey="TypeID")]
		public EntitySet<NEW> NEWs
		{
			get
			{
				return this._NEWs;
			}
			set
			{
				this._NEWs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_NEWs(NEW entity)
		{
			this.SendPropertyChanging();
			entity.NEWS_TYPE = this;
		}
		
		private void detach_NEWs(NEW entity)
		{
			this.SendPropertyChanging();
			entity.NEWS_TYPE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PROJECT")]
	public partial class PROJECT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _TypeID;
		
		private string _Name;
		
		private System.Nullable<System.DateTime> _BeginDay;
		
		private int _AddressID;
		
		private string _Description;
		
		private EntitySet<REAL_ESTATE> _REAL_ESTATEs;
		
		private EntityRef<ADDRESS> _ADDRESS;
		
		private EntityRef<PROJECT_TYPE> _PROJECT_TYPE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTypeIDChanging(int value);
    partial void OnTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnBeginDayChanging(System.Nullable<System.DateTime> value);
    partial void OnBeginDayChanged();
    partial void OnAddressIDChanging(int value);
    partial void OnAddressIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public PROJECT()
		{
			this._REAL_ESTATEs = new EntitySet<REAL_ESTATE>(new Action<REAL_ESTATE>(this.attach_REAL_ESTATEs), new Action<REAL_ESTATE>(this.detach_REAL_ESTATEs));
			this._ADDRESS = default(EntityRef<ADDRESS>);
			this._PROJECT_TYPE = default(EntityRef<PROJECT_TYPE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="Int NOT NULL")]
		public int TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					if (this._PROJECT_TYPE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeginDay", DbType="Date")]
		public System.Nullable<System.DateTime> BeginDay
		{
			get
			{
				return this._BeginDay;
			}
			set
			{
				if ((this._BeginDay != value))
				{
					this.OnBeginDayChanging(value);
					this.SendPropertyChanging();
					this._BeginDay = value;
					this.SendPropertyChanged("BeginDay");
					this.OnBeginDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressID", DbType="Int NOT NULL")]
		public int AddressID
		{
			get
			{
				return this._AddressID;
			}
			set
			{
				if ((this._AddressID != value))
				{
					if (this._ADDRESS.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressIDChanging(value);
					this.SendPropertyChanging();
					this._AddressID = value;
					this.SendPropertyChanged("AddressID");
					this.OnAddressIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(500)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PROJECT_REAL_ESTATE", Storage="_REAL_ESTATEs", ThisKey="ID", OtherKey="ProjectID")]
		public EntitySet<REAL_ESTATE> REAL_ESTATEs
		{
			get
			{
				return this._REAL_ESTATEs;
			}
			set
			{
				this._REAL_ESTATEs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ADDRESS_PROJECT", Storage="_ADDRESS", ThisKey="AddressID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ADDRESS ADDRESS
		{
			get
			{
				return this._ADDRESS.Entity;
			}
			set
			{
				ADDRESS previousValue = this._ADDRESS.Entity;
				if (((previousValue != value) 
							|| (this._ADDRESS.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ADDRESS.Entity = null;
						previousValue.PROJECTs.Remove(this);
					}
					this._ADDRESS.Entity = value;
					if ((value != null))
					{
						value.PROJECTs.Add(this);
						this._AddressID = value.ID;
					}
					else
					{
						this._AddressID = default(int);
					}
					this.SendPropertyChanged("ADDRESS");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PROJECT_TYPE_PROJECT", Storage="_PROJECT_TYPE", ThisKey="TypeID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public PROJECT_TYPE PROJECT_TYPE
		{
			get
			{
				return this._PROJECT_TYPE.Entity;
			}
			set
			{
				PROJECT_TYPE previousValue = this._PROJECT_TYPE.Entity;
				if (((previousValue != value) 
							|| (this._PROJECT_TYPE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PROJECT_TYPE.Entity = null;
						previousValue.PROJECTs.Remove(this);
					}
					this._PROJECT_TYPE.Entity = value;
					if ((value != null))
					{
						value.PROJECTs.Add(this);
						this._TypeID = value.ID;
					}
					else
					{
						this._TypeID = default(int);
					}
					this.SendPropertyChanged("PROJECT_TYPE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_REAL_ESTATEs(REAL_ESTATE entity)
		{
			this.SendPropertyChanging();
			entity.PROJECT = this;
		}
		
		private void detach_REAL_ESTATEs(REAL_ESTATE entity)
		{
			this.SendPropertyChanging();
			entity.PROJECT = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PROJECT_TYPE")]
	public partial class PROJECT_TYPE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<PROJECT> _PROJECTs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public PROJECT_TYPE()
		{
			this._PROJECTs = new EntitySet<PROJECT>(new Action<PROJECT>(this.attach_PROJECTs), new Action<PROJECT>(this.detach_PROJECTs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(500)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PROJECT_TYPE_PROJECT", Storage="_PROJECTs", ThisKey="ID", OtherKey="TypeID")]
		public EntitySet<PROJECT> PROJECTs
		{
			get
			{
				return this._PROJECTs;
			}
			set
			{
				this._PROJECTs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PROJECTs(PROJECT entity)
		{
			this.SendPropertyChanging();
			entity.PROJECT_TYPE = this;
		}
		
		private void detach_PROJECTs(PROJECT entity)
		{
			this.SendPropertyChanging();
			entity.PROJECT_TYPE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PROPERTY_COMPANY")]
	public partial class PROPERTY_COMPANY : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CompanyID;
		
		private int _RealEstateID;
		
		private EntityRef<COMPANY> _COMPANY;
		
		private EntityRef<REAL_ESTATE> _REAL_ESTATE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnRealEstateIDChanging(int value);
    partial void OnRealEstateIDChanged();
    #endregion
		
		public PROPERTY_COMPANY()
		{
			this._COMPANY = default(EntityRef<COMPANY>);
			this._REAL_ESTATE = default(EntityRef<REAL_ESTATE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL")]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._COMPANY.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RealEstateID", DbType="Int NOT NULL")]
		public int RealEstateID
		{
			get
			{
				return this._RealEstateID;
			}
			set
			{
				if ((this._RealEstateID != value))
				{
					if (this._REAL_ESTATE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRealEstateIDChanging(value);
					this.SendPropertyChanging();
					this._RealEstateID = value;
					this.SendPropertyChanged("RealEstateID");
					this.OnRealEstateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="COMPANY_PROPERTY_COMPANY", Storage="_COMPANY", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
		public COMPANY COMPANY
		{
			get
			{
				return this._COMPANY.Entity;
			}
			set
			{
				COMPANY previousValue = this._COMPANY.Entity;
				if (((previousValue != value) 
							|| (this._COMPANY.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._COMPANY.Entity = null;
						previousValue.PROPERTY_COMPANies.Remove(this);
					}
					this._COMPANY.Entity = value;
					if ((value != null))
					{
						value.PROPERTY_COMPANies.Add(this);
						this._CompanyID = value.ID;
					}
					else
					{
						this._CompanyID = default(int);
					}
					this.SendPropertyChanged("COMPANY");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="REAL_ESTATE_PROPERTY_COMPANY", Storage="_REAL_ESTATE", ThisKey="RealEstateID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public REAL_ESTATE REAL_ESTATE
		{
			get
			{
				return this._REAL_ESTATE.Entity;
			}
			set
			{
				REAL_ESTATE previousValue = this._REAL_ESTATE.Entity;
				if (((previousValue != value) 
							|| (this._REAL_ESTATE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._REAL_ESTATE.Entity = null;
						previousValue.PROPERTY_COMPANies.Remove(this);
					}
					this._REAL_ESTATE.Entity = value;
					if ((value != null))
					{
						value.PROPERTY_COMPANies.Add(this);
						this._RealEstateID = value.ID;
					}
					else
					{
						this._RealEstateID = default(int);
					}
					this.SendPropertyChanged("REAL_ESTATE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PROPERTY_CUSTOMER")]
	public partial class PROPERTY_CUSTOMER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CustomerID;
		
		private int _RealEstateID;
		
		private EntityRef<CUSTOMER> _CUSTOMER;
		
		private EntityRef<REAL_ESTATE> _REAL_ESTATE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnRealEstateIDChanging(int value);
    partial void OnRealEstateIDChanged();
    #endregion
		
		public PROPERTY_CUSTOMER()
		{
			this._CUSTOMER = default(EntityRef<CUSTOMER>);
			this._REAL_ESTATE = default(EntityRef<REAL_ESTATE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int NOT NULL")]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					if (this._CUSTOMER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RealEstateID", DbType="Int NOT NULL")]
		public int RealEstateID
		{
			get
			{
				return this._RealEstateID;
			}
			set
			{
				if ((this._RealEstateID != value))
				{
					if (this._REAL_ESTATE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRealEstateIDChanging(value);
					this.SendPropertyChanging();
					this._RealEstateID = value;
					this.SendPropertyChanged("RealEstateID");
					this.OnRealEstateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CUSTOMER_PROPERTY_CUSTOMER", Storage="_CUSTOMER", ThisKey="CustomerID", OtherKey="ID", IsForeignKey=true)]
		public CUSTOMER CUSTOMER
		{
			get
			{
				return this._CUSTOMER.Entity;
			}
			set
			{
				CUSTOMER previousValue = this._CUSTOMER.Entity;
				if (((previousValue != value) 
							|| (this._CUSTOMER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CUSTOMER.Entity = null;
						previousValue.PROPERTY_CUSTOMERs.Remove(this);
					}
					this._CUSTOMER.Entity = value;
					if ((value != null))
					{
						value.PROPERTY_CUSTOMERs.Add(this);
						this._CustomerID = value.ID;
					}
					else
					{
						this._CustomerID = default(int);
					}
					this.SendPropertyChanged("CUSTOMER");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="REAL_ESTATE_PROPERTY_CUSTOMER", Storage="_REAL_ESTATE", ThisKey="RealEstateID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public REAL_ESTATE REAL_ESTATE
		{
			get
			{
				return this._REAL_ESTATE.Entity;
			}
			set
			{
				REAL_ESTATE previousValue = this._REAL_ESTATE.Entity;
				if (((previousValue != value) 
							|| (this._REAL_ESTATE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._REAL_ESTATE.Entity = null;
						previousValue.PROPERTY_CUSTOMERs.Remove(this);
					}
					this._REAL_ESTATE.Entity = value;
					if ((value != null))
					{
						value.PROPERTY_CUSTOMERs.Add(this);
						this._RealEstateID = value.ID;
					}
					else
					{
						this._RealEstateID = default(int);
					}
					this.SendPropertyChanged("REAL_ESTATE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.REAL_ESTATE")]
	public partial class REAL_ESTATE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _TypeID;
		
		private int _AddressID;
		
		private System.Nullable<int> _LivingRoom;
		
		private System.Nullable<int> _BedRoom;
		
		private System.Nullable<int> _BathRoom;
		
		private System.Nullable<int> _Storey;
		
		private System.Nullable<double> _TotalUseArea;
		
		private System.Nullable<double> _CampusFront;
		
		private System.Nullable<double> _CampusBehind;
		
		private System.Nullable<double> _CampusLength;
		
		private System.Nullable<double> _BuildFront;
		
		private System.Nullable<double> _BuildBehind;
		
		private System.Nullable<double> _BuildLength;
		
		private string _Legal;
		
		private string _Direction;
		
		private string _FrontStreet;
		
		private string _Location;
		
		private decimal _Price;
		
		private int _UnitID;
		
		private int _UnitPriceID;
		
		private System.Nullable<int> _ProjectID;
		
		private System.Nullable<int> _ContactID;
		
		private EntitySet<NEWS_SALE> _NEWS_SALEs;
		
		private EntitySet<PROPERTY_COMPANY> _PROPERTY_COMPANies;
		
		private EntitySet<PROPERTY_CUSTOMER> _PROPERTY_CUSTOMERs;
		
		private EntitySet<REAL_ESTATE_IMAGE> _REAL_ESTATE_IMAGEs;
		
		private EntitySet<UTILITY_DETAIL> _UTILITY_DETAILs;
		
		private EntityRef<ADDRESS> _ADDRESS;
		
		private EntityRef<CONTACT> _CONTACT;
		
		private EntityRef<PROJECT> _PROJECT;
		
		private EntityRef<REAL_ESTATE_TYPE> _REAL_ESTATE_TYPE;
		
		private EntityRef<UNIT> _UNIT;
		
		private EntityRef<UNIT_PRICE> _UNIT_PRICE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTypeIDChanging(int value);
    partial void OnTypeIDChanged();
    partial void OnAddressIDChanging(int value);
    partial void OnAddressIDChanged();
    partial void OnLivingRoomChanging(System.Nullable<int> value);
    partial void OnLivingRoomChanged();
    partial void OnBedRoomChanging(System.Nullable<int> value);
    partial void OnBedRoomChanged();
    partial void OnBathRoomChanging(System.Nullable<int> value);
    partial void OnBathRoomChanged();
    partial void OnStoreyChanging(System.Nullable<int> value);
    partial void OnStoreyChanged();
    partial void OnTotalUseAreaChanging(System.Nullable<double> value);
    partial void OnTotalUseAreaChanged();
    partial void OnCampusFrontChanging(System.Nullable<double> value);
    partial void OnCampusFrontChanged();
    partial void OnCampusBehindChanging(System.Nullable<double> value);
    partial void OnCampusBehindChanged();
    partial void OnCampusLengthChanging(System.Nullable<double> value);
    partial void OnCampusLengthChanged();
    partial void OnBuildFrontChanging(System.Nullable<double> value);
    partial void OnBuildFrontChanged();
    partial void OnBuildBehindChanging(System.Nullable<double> value);
    partial void OnBuildBehindChanged();
    partial void OnBuildLengthChanging(System.Nullable<double> value);
    partial void OnBuildLengthChanged();
    partial void OnLegalChanging(string value);
    partial void OnLegalChanged();
    partial void OnDirectionChanging(string value);
    partial void OnDirectionChanged();
    partial void OnFrontStreetChanging(string value);
    partial void OnFrontStreetChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnUnitIDChanging(int value);
    partial void OnUnitIDChanged();
    partial void OnUnitPriceIDChanging(int value);
    partial void OnUnitPriceIDChanged();
    partial void OnProjectIDChanging(System.Nullable<int> value);
    partial void OnProjectIDChanged();
    partial void OnContactIDChanging(System.Nullable<int> value);
    partial void OnContactIDChanged();
    #endregion
		
		public REAL_ESTATE()
		{
			this._NEWS_SALEs = new EntitySet<NEWS_SALE>(new Action<NEWS_SALE>(this.attach_NEWS_SALEs), new Action<NEWS_SALE>(this.detach_NEWS_SALEs));
			this._PROPERTY_COMPANies = new EntitySet<PROPERTY_COMPANY>(new Action<PROPERTY_COMPANY>(this.attach_PROPERTY_COMPANies), new Action<PROPERTY_COMPANY>(this.detach_PROPERTY_COMPANies));
			this._PROPERTY_CUSTOMERs = new EntitySet<PROPERTY_CUSTOMER>(new Action<PROPERTY_CUSTOMER>(this.attach_PROPERTY_CUSTOMERs), new Action<PROPERTY_CUSTOMER>(this.detach_PROPERTY_CUSTOMERs));
			this._REAL_ESTATE_IMAGEs = new EntitySet<REAL_ESTATE_IMAGE>(new Action<REAL_ESTATE_IMAGE>(this.attach_REAL_ESTATE_IMAGEs), new Action<REAL_ESTATE_IMAGE>(this.detach_REAL_ESTATE_IMAGEs));
			this._UTILITY_DETAILs = new EntitySet<UTILITY_DETAIL>(new Action<UTILITY_DETAIL>(this.attach_UTILITY_DETAILs), new Action<UTILITY_DETAIL>(this.detach_UTILITY_DETAILs));
			this._ADDRESS = default(EntityRef<ADDRESS>);
			this._CONTACT = default(EntityRef<CONTACT>);
			this._PROJECT = default(EntityRef<PROJECT>);
			this._REAL_ESTATE_TYPE = default(EntityRef<REAL_ESTATE_TYPE>);
			this._UNIT = default(EntityRef<UNIT>);
			this._UNIT_PRICE = default(EntityRef<UNIT_PRICE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="Int NOT NULL")]
		public int TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					if (this._REAL_ESTATE_TYPE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressID", DbType="Int NOT NULL")]
		public int AddressID
		{
			get
			{
				return this._AddressID;
			}
			set
			{
				if ((this._AddressID != value))
				{
					if (this._ADDRESS.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressIDChanging(value);
					this.SendPropertyChanging();
					this._AddressID = value;
					this.SendPropertyChanged("AddressID");
					this.OnAddressIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LivingRoom", DbType="Int")]
		public System.Nullable<int> LivingRoom
		{
			get
			{
				return this._LivingRoom;
			}
			set
			{
				if ((this._LivingRoom != value))
				{
					this.OnLivingRoomChanging(value);
					this.SendPropertyChanging();
					this._LivingRoom = value;
					this.SendPropertyChanged("LivingRoom");
					this.OnLivingRoomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BedRoom", DbType="Int")]
		public System.Nullable<int> BedRoom
		{
			get
			{
				return this._BedRoom;
			}
			set
			{
				if ((this._BedRoom != value))
				{
					this.OnBedRoomChanging(value);
					this.SendPropertyChanging();
					this._BedRoom = value;
					this.SendPropertyChanged("BedRoom");
					this.OnBedRoomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BathRoom", DbType="Int")]
		public System.Nullable<int> BathRoom
		{
			get
			{
				return this._BathRoom;
			}
			set
			{
				if ((this._BathRoom != value))
				{
					this.OnBathRoomChanging(value);
					this.SendPropertyChanging();
					this._BathRoom = value;
					this.SendPropertyChanged("BathRoom");
					this.OnBathRoomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Storey", DbType="Int")]
		public System.Nullable<int> Storey
		{
			get
			{
				return this._Storey;
			}
			set
			{
				if ((this._Storey != value))
				{
					this.OnStoreyChanging(value);
					this.SendPropertyChanging();
					this._Storey = value;
					this.SendPropertyChanged("Storey");
					this.OnStoreyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalUseArea", DbType="Float")]
		public System.Nullable<double> TotalUseArea
		{
			get
			{
				return this._TotalUseArea;
			}
			set
			{
				if ((this._TotalUseArea != value))
				{
					this.OnTotalUseAreaChanging(value);
					this.SendPropertyChanging();
					this._TotalUseArea = value;
					this.SendPropertyChanged("TotalUseArea");
					this.OnTotalUseAreaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CampusFront", DbType="Float")]
		public System.Nullable<double> CampusFront
		{
			get
			{
				return this._CampusFront;
			}
			set
			{
				if ((this._CampusFront != value))
				{
					this.OnCampusFrontChanging(value);
					this.SendPropertyChanging();
					this._CampusFront = value;
					this.SendPropertyChanged("CampusFront");
					this.OnCampusFrontChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CampusBehind", DbType="Float")]
		public System.Nullable<double> CampusBehind
		{
			get
			{
				return this._CampusBehind;
			}
			set
			{
				if ((this._CampusBehind != value))
				{
					this.OnCampusBehindChanging(value);
					this.SendPropertyChanging();
					this._CampusBehind = value;
					this.SendPropertyChanged("CampusBehind");
					this.OnCampusBehindChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CampusLength", DbType="Float")]
		public System.Nullable<double> CampusLength
		{
			get
			{
				return this._CampusLength;
			}
			set
			{
				if ((this._CampusLength != value))
				{
					this.OnCampusLengthChanging(value);
					this.SendPropertyChanging();
					this._CampusLength = value;
					this.SendPropertyChanged("CampusLength");
					this.OnCampusLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuildFront", DbType="Float")]
		public System.Nullable<double> BuildFront
		{
			get
			{
				return this._BuildFront;
			}
			set
			{
				if ((this._BuildFront != value))
				{
					this.OnBuildFrontChanging(value);
					this.SendPropertyChanging();
					this._BuildFront = value;
					this.SendPropertyChanged("BuildFront");
					this.OnBuildFrontChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuildBehind", DbType="Float")]
		public System.Nullable<double> BuildBehind
		{
			get
			{
				return this._BuildBehind;
			}
			set
			{
				if ((this._BuildBehind != value))
				{
					this.OnBuildBehindChanging(value);
					this.SendPropertyChanging();
					this._BuildBehind = value;
					this.SendPropertyChanged("BuildBehind");
					this.OnBuildBehindChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuildLength", DbType="Float")]
		public System.Nullable<double> BuildLength
		{
			get
			{
				return this._BuildLength;
			}
			set
			{
				if ((this._BuildLength != value))
				{
					this.OnBuildLengthChanging(value);
					this.SendPropertyChanging();
					this._BuildLength = value;
					this.SendPropertyChanged("BuildLength");
					this.OnBuildLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Legal", DbType="NVarChar(500)")]
		public string Legal
		{
			get
			{
				return this._Legal;
			}
			set
			{
				if ((this._Legal != value))
				{
					this.OnLegalChanging(value);
					this.SendPropertyChanging();
					this._Legal = value;
					this.SendPropertyChanged("Legal");
					this.OnLegalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Direction", DbType="NVarChar(100)")]
		public string Direction
		{
			get
			{
				return this._Direction;
			}
			set
			{
				if ((this._Direction != value))
				{
					this.OnDirectionChanging(value);
					this.SendPropertyChanging();
					this._Direction = value;
					this.SendPropertyChanged("Direction");
					this.OnDirectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FrontStreet", DbType="NVarChar(100)")]
		public string FrontStreet
		{
			get
			{
				return this._FrontStreet;
			}
			set
			{
				if ((this._FrontStreet != value))
				{
					this.OnFrontStreetChanging(value);
					this.SendPropertyChanging();
					this._FrontStreet = value;
					this.SendPropertyChanged("FrontStreet");
					this.OnFrontStreetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="NVarChar(100)")]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Money NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitID", DbType="Int NOT NULL")]
		public int UnitID
		{
			get
			{
				return this._UnitID;
			}
			set
			{
				if ((this._UnitID != value))
				{
					if (this._UNIT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUnitIDChanging(value);
					this.SendPropertyChanging();
					this._UnitID = value;
					this.SendPropertyChanged("UnitID");
					this.OnUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitPriceID", DbType="Int NOT NULL")]
		public int UnitPriceID
		{
			get
			{
				return this._UnitPriceID;
			}
			set
			{
				if ((this._UnitPriceID != value))
				{
					if (this._UNIT_PRICE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUnitPriceIDChanging(value);
					this.SendPropertyChanging();
					this._UnitPriceID = value;
					this.SendPropertyChanged("UnitPriceID");
					this.OnUnitPriceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int")]
		public System.Nullable<int> ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._PROJECT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactID", DbType="Int")]
		public System.Nullable<int> ContactID
		{
			get
			{
				return this._ContactID;
			}
			set
			{
				if ((this._ContactID != value))
				{
					if (this._CONTACT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactIDChanging(value);
					this.SendPropertyChanging();
					this._ContactID = value;
					this.SendPropertyChanged("ContactID");
					this.OnContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="REAL_ESTATE_NEWS_SALE", Storage="_NEWS_SALEs", ThisKey="ID", OtherKey="RealEstateID")]
		public EntitySet<NEWS_SALE> NEWS_SALEs
		{
			get
			{
				return this._NEWS_SALEs;
			}
			set
			{
				this._NEWS_SALEs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="REAL_ESTATE_PROPERTY_COMPANY", Storage="_PROPERTY_COMPANies", ThisKey="ID", OtherKey="RealEstateID")]
		public EntitySet<PROPERTY_COMPANY> PROPERTY_COMPANies
		{
			get
			{
				return this._PROPERTY_COMPANies;
			}
			set
			{
				this._PROPERTY_COMPANies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="REAL_ESTATE_PROPERTY_CUSTOMER", Storage="_PROPERTY_CUSTOMERs", ThisKey="ID", OtherKey="RealEstateID")]
		public EntitySet<PROPERTY_CUSTOMER> PROPERTY_CUSTOMERs
		{
			get
			{
				return this._PROPERTY_CUSTOMERs;
			}
			set
			{
				this._PROPERTY_CUSTOMERs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="REAL_ESTATE_REAL_ESTATE_IMAGE", Storage="_REAL_ESTATE_IMAGEs", ThisKey="ID", OtherKey="RealEstateID")]
		public EntitySet<REAL_ESTATE_IMAGE> REAL_ESTATE_IMAGEs
		{
			get
			{
				return this._REAL_ESTATE_IMAGEs;
			}
			set
			{
				this._REAL_ESTATE_IMAGEs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="REAL_ESTATE_UTILITY_DETAIL", Storage="_UTILITY_DETAILs", ThisKey="ID", OtherKey="RealEstateID")]
		public EntitySet<UTILITY_DETAIL> UTILITY_DETAILs
		{
			get
			{
				return this._UTILITY_DETAILs;
			}
			set
			{
				this._UTILITY_DETAILs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ADDRESS_REAL_ESTATE", Storage="_ADDRESS", ThisKey="AddressID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ADDRESS ADDRESS
		{
			get
			{
				return this._ADDRESS.Entity;
			}
			set
			{
				ADDRESS previousValue = this._ADDRESS.Entity;
				if (((previousValue != value) 
							|| (this._ADDRESS.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ADDRESS.Entity = null;
						previousValue.REAL_ESTATEs.Remove(this);
					}
					this._ADDRESS.Entity = value;
					if ((value != null))
					{
						value.REAL_ESTATEs.Add(this);
						this._AddressID = value.ID;
					}
					else
					{
						this._AddressID = default(int);
					}
					this.SendPropertyChanged("ADDRESS");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CONTACT_REAL_ESTATE", Storage="_CONTACT", ThisKey="ContactID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public CONTACT CONTACT
		{
			get
			{
				return this._CONTACT.Entity;
			}
			set
			{
				CONTACT previousValue = this._CONTACT.Entity;
				if (((previousValue != value) 
							|| (this._CONTACT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CONTACT.Entity = null;
						previousValue.REAL_ESTATEs.Remove(this);
					}
					this._CONTACT.Entity = value;
					if ((value != null))
					{
						value.REAL_ESTATEs.Add(this);
						this._ContactID = value.ID;
					}
					else
					{
						this._ContactID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CONTACT");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PROJECT_REAL_ESTATE", Storage="_PROJECT", ThisKey="ProjectID", OtherKey="ID", IsForeignKey=true)]
		public PROJECT PROJECT
		{
			get
			{
				return this._PROJECT.Entity;
			}
			set
			{
				PROJECT previousValue = this._PROJECT.Entity;
				if (((previousValue != value) 
							|| (this._PROJECT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PROJECT.Entity = null;
						previousValue.REAL_ESTATEs.Remove(this);
					}
					this._PROJECT.Entity = value;
					if ((value != null))
					{
						value.REAL_ESTATEs.Add(this);
						this._ProjectID = value.ID;
					}
					else
					{
						this._ProjectID = default(Nullable<int>);
					}
					this.SendPropertyChanged("PROJECT");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="REAL_ESTATE_TYPE_REAL_ESTATE", Storage="_REAL_ESTATE_TYPE", ThisKey="TypeID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public REAL_ESTATE_TYPE REAL_ESTATE_TYPE
		{
			get
			{
				return this._REAL_ESTATE_TYPE.Entity;
			}
			set
			{
				REAL_ESTATE_TYPE previousValue = this._REAL_ESTATE_TYPE.Entity;
				if (((previousValue != value) 
							|| (this._REAL_ESTATE_TYPE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._REAL_ESTATE_TYPE.Entity = null;
						previousValue.REAL_ESTATEs.Remove(this);
					}
					this._REAL_ESTATE_TYPE.Entity = value;
					if ((value != null))
					{
						value.REAL_ESTATEs.Add(this);
						this._TypeID = value.ID;
					}
					else
					{
						this._TypeID = default(int);
					}
					this.SendPropertyChanged("REAL_ESTATE_TYPE");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UNIT_REAL_ESTATE", Storage="_UNIT", ThisKey="UnitID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public UNIT UNIT
		{
			get
			{
				return this._UNIT.Entity;
			}
			set
			{
				UNIT previousValue = this._UNIT.Entity;
				if (((previousValue != value) 
							|| (this._UNIT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UNIT.Entity = null;
						previousValue.REAL_ESTATEs.Remove(this);
					}
					this._UNIT.Entity = value;
					if ((value != null))
					{
						value.REAL_ESTATEs.Add(this);
						this._UnitID = value.ID;
					}
					else
					{
						this._UnitID = default(int);
					}
					this.SendPropertyChanged("UNIT");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UNIT_PRICE_REAL_ESTATE", Storage="_UNIT_PRICE", ThisKey="UnitPriceID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public UNIT_PRICE UNIT_PRICE
		{
			get
			{
				return this._UNIT_PRICE.Entity;
			}
			set
			{
				UNIT_PRICE previousValue = this._UNIT_PRICE.Entity;
				if (((previousValue != value) 
							|| (this._UNIT_PRICE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UNIT_PRICE.Entity = null;
						previousValue.REAL_ESTATEs.Remove(this);
					}
					this._UNIT_PRICE.Entity = value;
					if ((value != null))
					{
						value.REAL_ESTATEs.Add(this);
						this._UnitPriceID = value.ID;
					}
					else
					{
						this._UnitPriceID = default(int);
					}
					this.SendPropertyChanged("UNIT_PRICE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_NEWS_SALEs(NEWS_SALE entity)
		{
			this.SendPropertyChanging();
			entity.REAL_ESTATE = this;
		}
		
		private void detach_NEWS_SALEs(NEWS_SALE entity)
		{
			this.SendPropertyChanging();
			entity.REAL_ESTATE = null;
		}
		
		private void attach_PROPERTY_COMPANies(PROPERTY_COMPANY entity)
		{
			this.SendPropertyChanging();
			entity.REAL_ESTATE = this;
		}
		
		private void detach_PROPERTY_COMPANies(PROPERTY_COMPANY entity)
		{
			this.SendPropertyChanging();
			entity.REAL_ESTATE = null;
		}
		
		private void attach_PROPERTY_CUSTOMERs(PROPERTY_CUSTOMER entity)
		{
			this.SendPropertyChanging();
			entity.REAL_ESTATE = this;
		}
		
		private void detach_PROPERTY_CUSTOMERs(PROPERTY_CUSTOMER entity)
		{
			this.SendPropertyChanging();
			entity.REAL_ESTATE = null;
		}
		
		private void attach_REAL_ESTATE_IMAGEs(REAL_ESTATE_IMAGE entity)
		{
			this.SendPropertyChanging();
			entity.REAL_ESTATE = this;
		}
		
		private void detach_REAL_ESTATE_IMAGEs(REAL_ESTATE_IMAGE entity)
		{
			this.SendPropertyChanging();
			entity.REAL_ESTATE = null;
		}
		
		private void attach_UTILITY_DETAILs(UTILITY_DETAIL entity)
		{
			this.SendPropertyChanging();
			entity.REAL_ESTATE = this;
		}
		
		private void detach_UTILITY_DETAILs(UTILITY_DETAIL entity)
		{
			this.SendPropertyChanging();
			entity.REAL_ESTATE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.REAL_ESTATE_IMAGE")]
	public partial class REAL_ESTATE_IMAGE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _RealEstateID;
		
		private int _ImageID;
		
		private EntityRef<IMAGE> _IMAGE;
		
		private EntityRef<REAL_ESTATE> _REAL_ESTATE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnRealEstateIDChanging(int value);
    partial void OnRealEstateIDChanged();
    partial void OnImageIDChanging(int value);
    partial void OnImageIDChanged();
    #endregion
		
		public REAL_ESTATE_IMAGE()
		{
			this._IMAGE = default(EntityRef<IMAGE>);
			this._REAL_ESTATE = default(EntityRef<REAL_ESTATE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RealEstateID", DbType="Int NOT NULL")]
		public int RealEstateID
		{
			get
			{
				return this._RealEstateID;
			}
			set
			{
				if ((this._RealEstateID != value))
				{
					if (this._REAL_ESTATE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRealEstateIDChanging(value);
					this.SendPropertyChanging();
					this._RealEstateID = value;
					this.SendPropertyChanged("RealEstateID");
					this.OnRealEstateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageID", DbType="Int NOT NULL")]
		public int ImageID
		{
			get
			{
				return this._ImageID;
			}
			set
			{
				if ((this._ImageID != value))
				{
					if (this._IMAGE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnImageIDChanging(value);
					this.SendPropertyChanging();
					this._ImageID = value;
					this.SendPropertyChanged("ImageID");
					this.OnImageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IMAGE_REAL_ESTATE_IMAGE", Storage="_IMAGE", ThisKey="ImageID", OtherKey="ID", IsForeignKey=true)]
		public IMAGE IMAGE
		{
			get
			{
				return this._IMAGE.Entity;
			}
			set
			{
				IMAGE previousValue = this._IMAGE.Entity;
				if (((previousValue != value) 
							|| (this._IMAGE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IMAGE.Entity = null;
						previousValue.REAL_ESTATE_IMAGEs.Remove(this);
					}
					this._IMAGE.Entity = value;
					if ((value != null))
					{
						value.REAL_ESTATE_IMAGEs.Add(this);
						this._ImageID = value.ID;
					}
					else
					{
						this._ImageID = default(int);
					}
					this.SendPropertyChanged("IMAGE");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="REAL_ESTATE_REAL_ESTATE_IMAGE", Storage="_REAL_ESTATE", ThisKey="RealEstateID", OtherKey="ID", IsForeignKey=true)]
		public REAL_ESTATE REAL_ESTATE
		{
			get
			{
				return this._REAL_ESTATE.Entity;
			}
			set
			{
				REAL_ESTATE previousValue = this._REAL_ESTATE.Entity;
				if (((previousValue != value) 
							|| (this._REAL_ESTATE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._REAL_ESTATE.Entity = null;
						previousValue.REAL_ESTATE_IMAGEs.Remove(this);
					}
					this._REAL_ESTATE.Entity = value;
					if ((value != null))
					{
						value.REAL_ESTATE_IMAGEs.Add(this);
						this._RealEstateID = value.ID;
					}
					else
					{
						this._RealEstateID = default(int);
					}
					this.SendPropertyChanged("REAL_ESTATE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.REAL_ESTATE_TYPE")]
	public partial class REAL_ESTATE_TYPE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<REAL_ESTATE> _REAL_ESTATEs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public REAL_ESTATE_TYPE()
		{
			this._REAL_ESTATEs = new EntitySet<REAL_ESTATE>(new Action<REAL_ESTATE>(this.attach_REAL_ESTATEs), new Action<REAL_ESTATE>(this.detach_REAL_ESTATEs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(500)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="REAL_ESTATE_TYPE_REAL_ESTATE", Storage="_REAL_ESTATEs", ThisKey="ID", OtherKey="TypeID")]
		public EntitySet<REAL_ESTATE> REAL_ESTATEs
		{
			get
			{
				return this._REAL_ESTATEs;
			}
			set
			{
				this._REAL_ESTATEs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_REAL_ESTATEs(REAL_ESTATE entity)
		{
			this.SendPropertyChanging();
			entity.REAL_ESTATE_TYPE = this;
		}
		
		private void detach_REAL_ESTATEs(REAL_ESTATE entity)
		{
			this.SendPropertyChanging();
			entity.REAL_ESTATE_TYPE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[RULE]")]
	public partial class RULE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<GROUP_DETAIL> _GROUP_DETAILs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public RULE()
		{
			this._GROUP_DETAILs = new EntitySet<GROUP_DETAIL>(new Action<GROUP_DETAIL>(this.attach_GROUP_DETAILs), new Action<GROUP_DETAIL>(this.detach_GROUP_DETAILs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(500)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RULE_GROUP_DETAIL", Storage="_GROUP_DETAILs", ThisKey="ID", OtherKey="RuleID")]
		public EntitySet<GROUP_DETAIL> GROUP_DETAILs
		{
			get
			{
				return this._GROUP_DETAILs;
			}
			set
			{
				this._GROUP_DETAILs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GROUP_DETAILs(GROUP_DETAIL entity)
		{
			this.SendPropertyChanging();
			entity.RULE = this;
		}
		
		private void detach_GROUP_DETAILs(GROUP_DETAIL entity)
		{
			this.SendPropertyChanging();
			entity.RULE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.STREET")]
	public partial class STREET : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<ADDRESS> _ADDRESSes;
		
		private EntitySet<DISTRICT_DETAIL> _DISTRICT_DETAILs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public STREET()
		{
			this._ADDRESSes = new EntitySet<ADDRESS>(new Action<ADDRESS>(this.attach_ADDRESSes), new Action<ADDRESS>(this.detach_ADDRESSes));
			this._DISTRICT_DETAILs = new EntitySet<DISTRICT_DETAIL>(new Action<DISTRICT_DETAIL>(this.attach_DISTRICT_DETAILs), new Action<DISTRICT_DETAIL>(this.detach_DISTRICT_DETAILs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STREET_ADDRESS", Storage="_ADDRESSes", ThisKey="ID", OtherKey="StreetID")]
		public EntitySet<ADDRESS> ADDRESSes
		{
			get
			{
				return this._ADDRESSes;
			}
			set
			{
				this._ADDRESSes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STREET_DISTRICT_DETAIL", Storage="_DISTRICT_DETAILs", ThisKey="ID", OtherKey="StreetID")]
		public EntitySet<DISTRICT_DETAIL> DISTRICT_DETAILs
		{
			get
			{
				return this._DISTRICT_DETAILs;
			}
			set
			{
				this._DISTRICT_DETAILs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ADDRESSes(ADDRESS entity)
		{
			this.SendPropertyChanging();
			entity.STREET = this;
		}
		
		private void detach_ADDRESSes(ADDRESS entity)
		{
			this.SendPropertyChanging();
			entity.STREET = null;
		}
		
		private void attach_DISTRICT_DETAILs(DISTRICT_DETAIL entity)
		{
			this.SendPropertyChanging();
			entity.STREET = this;
		}
		
		private void detach_DISTRICT_DETAILs(DISTRICT_DETAIL entity)
		{
			this.SendPropertyChanging();
			entity.STREET = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UNIT")]
	public partial class UNIT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<REAL_ESTATE> _REAL_ESTATEs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public UNIT()
		{
			this._REAL_ESTATEs = new EntitySet<REAL_ESTATE>(new Action<REAL_ESTATE>(this.attach_REAL_ESTATEs), new Action<REAL_ESTATE>(this.detach_REAL_ESTATEs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UNIT_REAL_ESTATE", Storage="_REAL_ESTATEs", ThisKey="ID", OtherKey="UnitID")]
		public EntitySet<REAL_ESTATE> REAL_ESTATEs
		{
			get
			{
				return this._REAL_ESTATEs;
			}
			set
			{
				this._REAL_ESTATEs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_REAL_ESTATEs(REAL_ESTATE entity)
		{
			this.SendPropertyChanging();
			entity.UNIT = this;
		}
		
		private void detach_REAL_ESTATEs(REAL_ESTATE entity)
		{
			this.SendPropertyChanging();
			entity.UNIT = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UNIT_PRICE")]
	public partial class UNIT_PRICE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<REAL_ESTATE> _REAL_ESTATEs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public UNIT_PRICE()
		{
			this._REAL_ESTATEs = new EntitySet<REAL_ESTATE>(new Action<REAL_ESTATE>(this.attach_REAL_ESTATEs), new Action<REAL_ESTATE>(this.detach_REAL_ESTATEs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UNIT_PRICE_REAL_ESTATE", Storage="_REAL_ESTATEs", ThisKey="ID", OtherKey="UnitPriceID")]
		public EntitySet<REAL_ESTATE> REAL_ESTATEs
		{
			get
			{
				return this._REAL_ESTATEs;
			}
			set
			{
				this._REAL_ESTATEs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_REAL_ESTATEs(REAL_ESTATE entity)
		{
			this.SendPropertyChanging();
			entity.UNIT_PRICE = this;
		}
		
		private void detach_REAL_ESTATEs(REAL_ESTATE entity)
		{
			this.SendPropertyChanging();
			entity.UNIT_PRICE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[USER]")]
	public partial class USER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Username;
		
		private string _Password;
		
		private string _Email;
		
		private string _Phone;
		
		private System.Nullable<int> _GroupID;
		
		private EntitySet<CUSTOMER> _CUSTOMERs;
		
		private EntityRef<GROUP> _GROUP;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnGroupIDChanging(System.Nullable<int> value);
    partial void OnGroupIDChanged();
    #endregion
		
		public USER()
		{
			this._CUSTOMERs = new EntitySet<CUSTOMER>(new Action<CUSTOMER>(this.attach_CUSTOMERs), new Action<CUSTOMER>(this.detach_CUSTOMERs));
			this._GROUP = default(EntityRef<GROUP>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(20)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="Int")]
		public System.Nullable<int> GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._GROUP.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USER_CUSTOMER", Storage="_CUSTOMERs", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<CUSTOMER> CUSTOMERs
		{
			get
			{
				return this._CUSTOMERs;
			}
			set
			{
				this._CUSTOMERs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GROUP_USER", Storage="_GROUP", ThisKey="GroupID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public GROUP GROUP
		{
			get
			{
				return this._GROUP.Entity;
			}
			set
			{
				GROUP previousValue = this._GROUP.Entity;
				if (((previousValue != value) 
							|| (this._GROUP.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GROUP.Entity = null;
						previousValue.USERs.Remove(this);
					}
					this._GROUP.Entity = value;
					if ((value != null))
					{
						value.USERs.Add(this);
						this._GroupID = value.ID;
					}
					else
					{
						this._GroupID = default(Nullable<int>);
					}
					this.SendPropertyChanged("GROUP");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CUSTOMERs(CUSTOMER entity)
		{
			this.SendPropertyChanging();
			entity.USER = this;
		}
		
		private void detach_CUSTOMERs(CUSTOMER entity)
		{
			this.SendPropertyChanging();
			entity.USER = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UTILITY")]
	public partial class UTILITY : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<UTILITY_DETAIL> _UTILITY_DETAILs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public UTILITY()
		{
			this._UTILITY_DETAILs = new EntitySet<UTILITY_DETAIL>(new Action<UTILITY_DETAIL>(this.attach_UTILITY_DETAILs), new Action<UTILITY_DETAIL>(this.detach_UTILITY_DETAILs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(500)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UTILITY_UTILITY_DETAIL", Storage="_UTILITY_DETAILs", ThisKey="ID", OtherKey="UtilityID")]
		public EntitySet<UTILITY_DETAIL> UTILITY_DETAILs
		{
			get
			{
				return this._UTILITY_DETAILs;
			}
			set
			{
				this._UTILITY_DETAILs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UTILITY_DETAILs(UTILITY_DETAIL entity)
		{
			this.SendPropertyChanging();
			entity.UTILITY = this;
		}
		
		private void detach_UTILITY_DETAILs(UTILITY_DETAIL entity)
		{
			this.SendPropertyChanging();
			entity.UTILITY = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UTILITY_DETAIL")]
	public partial class UTILITY_DETAIL : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _RealEstateID;
		
		private int _UtilityID;
		
		private EntityRef<REAL_ESTATE> _REAL_ESTATE;
		
		private EntityRef<UTILITY> _UTILITY;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnRealEstateIDChanging(int value);
    partial void OnRealEstateIDChanged();
    partial void OnUtilityIDChanging(int value);
    partial void OnUtilityIDChanged();
    #endregion
		
		public UTILITY_DETAIL()
		{
			this._REAL_ESTATE = default(EntityRef<REAL_ESTATE>);
			this._UTILITY = default(EntityRef<UTILITY>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RealEstateID", DbType="Int NOT NULL")]
		public int RealEstateID
		{
			get
			{
				return this._RealEstateID;
			}
			set
			{
				if ((this._RealEstateID != value))
				{
					if (this._REAL_ESTATE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRealEstateIDChanging(value);
					this.SendPropertyChanging();
					this._RealEstateID = value;
					this.SendPropertyChanged("RealEstateID");
					this.OnRealEstateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UtilityID", DbType="Int NOT NULL")]
		public int UtilityID
		{
			get
			{
				return this._UtilityID;
			}
			set
			{
				if ((this._UtilityID != value))
				{
					if (this._UTILITY.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUtilityIDChanging(value);
					this.SendPropertyChanging();
					this._UtilityID = value;
					this.SendPropertyChanged("UtilityID");
					this.OnUtilityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="REAL_ESTATE_UTILITY_DETAIL", Storage="_REAL_ESTATE", ThisKey="RealEstateID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public REAL_ESTATE REAL_ESTATE
		{
			get
			{
				return this._REAL_ESTATE.Entity;
			}
			set
			{
				REAL_ESTATE previousValue = this._REAL_ESTATE.Entity;
				if (((previousValue != value) 
							|| (this._REAL_ESTATE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._REAL_ESTATE.Entity = null;
						previousValue.UTILITY_DETAILs.Remove(this);
					}
					this._REAL_ESTATE.Entity = value;
					if ((value != null))
					{
						value.UTILITY_DETAILs.Add(this);
						this._RealEstateID = value.ID;
					}
					else
					{
						this._RealEstateID = default(int);
					}
					this.SendPropertyChanged("REAL_ESTATE");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UTILITY_UTILITY_DETAIL", Storage="_UTILITY", ThisKey="UtilityID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public UTILITY UTILITY
		{
			get
			{
				return this._UTILITY.Entity;
			}
			set
			{
				UTILITY previousValue = this._UTILITY.Entity;
				if (((previousValue != value) 
							|| (this._UTILITY.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UTILITY.Entity = null;
						previousValue.UTILITY_DETAILs.Remove(this);
					}
					this._UTILITY.Entity = value;
					if ((value != null))
					{
						value.UTILITY_DETAILs.Add(this);
						this._UtilityID = value.ID;
					}
					else
					{
						this._UtilityID = default(int);
					}
					this.SendPropertyChanged("UTILITY");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
